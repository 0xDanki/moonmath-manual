## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file main-moonmath.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_61 = Integer(61); _sage_const_0 = Integer(0); _sage_const_72 = Integer(72); _sage_const_93 = Integer(93); _sage_const_1 = Integer(1); _sage_const_96 = Integer(96); _sage_const_167 = Integer(167); _sage_const_2 = Integer(2); _sage_const_172 = Integer(172); _sage_const_184 = Integer(184); _sage_const_3 = Integer(3); _sage_const_188 = Integer(188); _sage_const_202 = Integer(202); _sage_const_4 = Integer(4); _sage_const_205 = Integer(205); _sage_const_284 = Integer(284); _sage_const_5 = Integer(5); _sage_const_286 = Integer(286); _sage_const_380 = Integer(380); _sage_const_6 = Integer(6); _sage_const_387 = Integer(387); _sage_const_423 = Integer(423); _sage_const_7 = Integer(7); _sage_const_426 = Integer(426); _sage_const_509 = Integer(509); _sage_const_8 = Integer(8); _sage_const_511 = Integer(511); _sage_const_590 = Integer(590); _sage_const_9 = Integer(9); _sage_const_594 = Integer(594); _sage_const_663 = Integer(663); _sage_const_10 = Integer(10); _sage_const_665 = Integer(665); _sage_const_711 = Integer(711); _sage_const_11 = Integer(11); _sage_const_716 = Integer(716); _sage_const_791 = Integer(791); _sage_const_12 = Integer(12); _sage_const_804 = Integer(804); _sage_const_826 = Integer(826); _sage_const_13 = Integer(13); _sage_const_835 = Integer(835); _sage_const_855 = Integer(855); _sage_const_14 = Integer(14); _sage_const_861 = Integer(861); _sage_const_872 = Integer(872); _sage_const_15 = Integer(15); _sage_const_877 = Integer(877); _sage_const_913 = Integer(913); _sage_const_16 = Integer(16); _sage_const_919 = Integer(919); _sage_const_933 = Integer(933); _sage_const_17 = Integer(17); _sage_const_939 = Integer(939); _sage_const_994 = Integer(994); _sage_const_18 = Integer(18); _sage_const_1001 = Integer(1001); _sage_const_1034 = Integer(1034); _sage_const_19 = Integer(19); _sage_const_1038 = Integer(1038); _sage_const_1058 = Integer(1058); _sage_const_20 = Integer(20); _sage_const_1063 = Integer(1063); _sage_const_1122 = Integer(1122); _sage_const_21 = Integer(21); _sage_const_1126 = Integer(1126); _sage_const_1151 = Integer(1151); _sage_const_22 = Integer(22); _sage_const_1155 = Integer(1155); _sage_const_502 = Integer(502); _sage_const_23 = Integer(23); _sage_const_515 = Integer(515); _sage_const_24 = Integer(24); _sage_const_602 = Integer(602); _sage_const_652 = Integer(652); _sage_const_25 = Integer(25); _sage_const_654 = Integer(654); _sage_const_717 = Integer(717); _sage_const_26 = Integer(26); _sage_const_719 = Integer(719); _sage_const_724 = Integer(724); _sage_const_27 = Integer(27); _sage_const_726 = Integer(726); _sage_const_799 = Integer(799); _sage_const_28 = Integer(28); _sage_const_810 = Integer(810); _sage_const_812 = Integer(812); _sage_const_500 = Integer(500); _sage_const_814 = Integer(814); _sage_const_816 = Integer(816); _sage_const_819 = Integer(819); _sage_const_100000 = Integer(100000); _sage_const_10000 = Integer(10000); _sage_const_825 = Integer(825); _sage_const_827 = Integer(827); _sage_const_830 = Integer(830); _sage_const_31 = Integer(31); _sage_const_836 = Integer(836); _sage_const_838 = Integer(838); _sage_const_858 = Integer(858); _sage_const_29 = Integer(29); _sage_const_868 = Integer(868); _sage_const_871 = Integer(871); _sage_const_892 = Integer(892); _sage_const_894 = Integer(894); _sage_const_946 = Integer(946); _sage_const_30 = Integer(30); _sage_const_948 = Integer(948); _sage_const_966 = Integer(966); _sage_const_971 = Integer(971); _sage_const_1269 = Integer(1269); _sage_const_32 = Integer(32); _sage_const_1281 = Integer(1281); _sage_const_9973 = Integer(9973); _sage_const_35 = Integer(35); _sage_const_37 = Integer(37); _sage_const_42 = Integer(42); _sage_const_51 = Integer(51); _sage_const_33 = Integer(33); _sage_const_68 = Integer(68); _sage_const_79 = Integer(79); _sage_const_83 = Integer(83); _sage_const_85 = Integer(85); _sage_const_101 = Integer(101); _sage_const_105 = Integer(105); _sage_const_107 = Integer(107); _sage_const_131 = Integer(131); _sage_const_34 = Integer(34); _sage_const_143 = Integer(143); _sage_const_335 = Integer(335); _sage_const_349 = Integer(349); _sage_const_358 = Integer(358); _sage_const_36 = Integer(36); _sage_const_365 = Integer(365); _sage_const_369 = Integer(369); _sage_const_376 = Integer(376); _sage_const_476 = Integer(476); _sage_const_38 = Integer(38); _sage_const_485 = Integer(485); _sage_const_772 = Integer(772); _sage_const_39 = Integer(39); _sage_const_781 = Integer(781); _sage_const_821 = Integer(821); _sage_const_40 = Integer(40); _sage_const_843 = Integer(843); _sage_const_957 = Integer(957); _sage_const_41 = Integer(41); _sage_const_965 = Integer(965); _sage_const_1085 = Integer(1085); _sage_const_1103 = Integer(1103); _sage_const_1111 = Integer(1111); _sage_const_43 = Integer(43); _sage_const_1120 = Integer(1120); _sage_const_1139 = Integer(1139); _sage_const_44 = Integer(44); _sage_const_1147 = Integer(1147); _sage_const_1198 = Integer(1198); _sage_const_45 = Integer(45); _sage_const_1205 = Integer(1205); _sage_const_1216 = Integer(1216); _sage_const_46 = Integer(46); _sage_const_1229 = Integer(1229); _sage_const_1231 = Integer(1231); _sage_const_47 = Integer(47); _sage_const_1242 = Integer(1242); _sage_const_1301 = Integer(1301); _sage_const_48 = Integer(48); _sage_const_1308 = Integer(1308); _sage_const_1312 = Integer(1312); _sage_const_49 = Integer(49); _sage_const_1320 = Integer(1320); _sage_const_1328 = Integer(1328); _sage_const_50 = Integer(50); _sage_const_1335 = Integer(1335); _sage_const_1339 = Integer(1339); _sage_const_1347 = Integer(1347); _sage_const_1422 = Integer(1422); _sage_const_52 = Integer(52); _sage_const_1431 = Integer(1431); _sage_const_1489 = Integer(1489); _sage_const_53 = Integer(53); _sage_const_1500 = Integer(1500); _sage_const_1503 = Integer(1503); _sage_const_54 = Integer(54); _sage_const_1505 = Integer(1505); _sage_const_1508 = Integer(1508); _sage_const_55 = Integer(55); _sage_const_1510 = Integer(1510); _sage_const_1517 = Integer(1517); _sage_const_56 = Integer(56); _sage_const_1520 = Integer(1520); _sage_const_1584 = Integer(1584); _sage_const_57 = Integer(57); _sage_const_1590 = Integer(1590); _sage_const_1623 = Integer(1623); _sage_const_58 = Integer(58); _sage_const_1628 = Integer(1628); _sage_const_1683 = Integer(1683); _sage_const_59 = Integer(59); _sage_const_1698 = Integer(1698); _sage_const_1876 = Integer(1876); _sage_const_60 = Integer(60); _sage_const_1887 = Integer(1887); _sage_const_1893 = Integer(1893); _sage_const_1907 = Integer(1907); _sage_const_1910 = Integer(1910); _sage_const_62 = Integer(62); _sage_const_1923 = Integer(1923); _sage_const_1935 = Integer(1935); _sage_const_63 = Integer(63); _sage_const_1949 = Integer(1949); _sage_const_2003 = Integer(2003); _sage_const_64 = Integer(64); _sage_const_2008 = Integer(2008); _sage_const_2025 = Integer(2025); _sage_const_65 = Integer(65); _sage_const_2037 = Integer(2037); _sage_const_2041 = Integer(2041); _sage_const_66 = Integer(66); _sage_const_2055 = Integer(2055); _sage_const_2064 = Integer(2064); _sage_const_2066 = Integer(2066); _sage_const_2068 = Integer(2068); _sage_const_2091 = Integer(2091); _sage_const_67 = Integer(67); _sage_const_2099 = Integer(2099); _sage_const_2177 = Integer(2177); _sage_const_2183 = Integer(2183); _sage_const_2191 = Integer(2191); _sage_const_69 = Integer(69); _sage_const_2202 = Integer(2202); _sage_const_2210 = Integer(2210); _sage_const_70 = Integer(70); _sage_const_2216 = Integer(2216); _sage_const_2257 = Integer(2257); _sage_const_71 = Integer(71); _sage_const_2261 = Integer(2261); _sage_const_1337 = Integer(1337); _sage_const_1346 = Integer(1346); _sage_const_1401 = Integer(1401); _sage_const_73 = Integer(73); _sage_const_1408 = Integer(1408); _sage_const_74 = Integer(74); _sage_const_1429 = Integer(1429)## This file (main-moonmath.sagetex.sage) was *autogenerated* from main-moonmath.tex with sagetex.sty version 2020/08/12 v3.5.
import sagetex
_st_ = sagetex.SageTeXProcessor('main-moonmath', version='2020/08/12 v3.5', version_check=True)
try:
 _st_.current_tex_line = _sage_const_61 
 _st_.commandline(_sage_const_0 , r"""
sage: ZZ #  Sage notation for the set of integers
sage: NN # Sage notation for the set of natural numbers
sage: QQ # Sage notation for the set of rational numbers
sage: ZZ(5) # Get an element from the set of integers
sage: ZZ(5) + ZZ(3)
sage: ZZ(5) * NN(3)
sage: ZZ.random_element(10**50)
sage: ZZ(27713).str(2) # Binary string representation
sage: NN(27713).str(2) # Binary string representation
sage: ZZ(27713).str(16) # Hexadecimal string representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_72 )
try:
 _st_.current_tex_line = _sage_const_93 
 _st_.commandline(_sage_const_1 , r"""
sage: n = NN(504)
sage: factor(n)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_96 )
try:
 _st_.current_tex_line = _sage_const_167 
 _st_.commandline(_sage_const_2 , r"""
sage: ZZ(-17) // ZZ(4) # Integer quotient
sage: ZZ(-17) % ZZ(4) # remainder
sage: ZZ(4).divides(ZZ(-17)) # self divides other
sage: ZZ(4).divides(ZZ(12))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_172 )
try:
 _st_.current_tex_line = _sage_const_184 
 _st_.commandline(_sage_const_3 , r"""
sage: ZZ(-17) // ZZ(-4) # Integer quotient
sage: ZZ(-17) % ZZ(-4) # remainder
sage: ZZ(-17).quo_rem(ZZ(-4)) # not Euclidean Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_188 )
try:
 _st_.current_tex_line = _sage_const_202 
 _st_.commandline(_sage_const_4 , r"""
sage: ZZ(143785).quo_rem(ZZ(17))
sage: ZZ(143785) == ZZ(8457)*ZZ(17) + ZZ(16) # check
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_205 )
try:
 _st_.current_tex_line = _sage_const_284 
 _st_.commandline(_sage_const_5 , r"""
sage: ZZ(12).xgcd(ZZ(5)) # (gcd(a,b),s,t)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_286 )
try:
 _st_.current_tex_line = _sage_const_380 
 _st_.commandline(_sage_const_6 , r"""
sage: ZZ(137).gcd(ZZ(64))
sage: ZZ(64)^ ZZ(137) % ZZ(137) == ZZ(64) % ZZ(137)
sage: ZZ(64)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
sage: ZZ(1918).gcd(ZZ(137))
sage: ZZ(1918)^ ZZ(137) % ZZ(137) == ZZ(1918) % ZZ(137)
sage: ZZ(1918)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_387 )
try:
 _st_.current_tex_line = _sage_const_423 
 _st_.commandline(_sage_const_7 , r"""
sage: (ZZ(7)* (ZZ(2)*ZZ(4) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(4) - ZZ(102))  % ZZ(6)
sage: (ZZ(7)* (ZZ(2)*ZZ(76) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(76) - ZZ(102))  % ZZ(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_426 )
try:
 _st_.current_tex_line = _sage_const_509 
 _st_.commandline(_sage_const_8 , r"""
sage: CRT_list([4,1,3,0], [7,3,5,11])
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_511 )
try:
 _st_.current_tex_line = _sage_const_590 
 _st_.commandline(_sage_const_9 , r"""
sage: Z6 = Integers(6)
sage: Z6(2) + Z6(5)
sage: Z6(7)*(Z6(2)*Z6(4)+Z6(21))+Z6(11) == Z6(4) - Z6(102)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_594 )
try:
 _st_.current_tex_line = _sage_const_663 
 _st_.commandline(_sage_const_10 , r"""
sage: ZZ(6).xgcd(ZZ(5))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_665 )
try:
 _st_.current_tex_line = _sage_const_711 
 _st_.commandline(_sage_const_11 , r"""
sage: Z5 = Integers(5)
sage: Z5(3)**(5-2)
sage: Z5(3)**(-1)
sage: Z5(3)**(5-2) == Z5(3)**(-1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_716 )
try:
 _st_.current_tex_line = _sage_const_791 
 _st_.commandline(_sage_const_12 , r"""
sage: Zx = ZZ['x'] # integer polynomials with variable x
sage: Zt.<t> = ZZ[] # integer polynomials with variable t
sage: Zx
sage: Zt
sage: p1 = Zx([17,-4,2])
sage: p1
sage: p1.degree()
sage: p1.leading_coefficient()
sage: p2 = Zt(t^23)
sage: p2
sage: p6 = Zx([0])
sage: p6.degree()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_804 )
try:
 _st_.current_tex_line = _sage_const_826 
 _st_.commandline(_sage_const_13 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: Z6x
sage: p1 = Z6x([5,-4,2])
sage: p1
sage: p1 = Z6x([17,-4,2])
sage: p1
sage: Z6x(x-2)*Z6x(x+3)*Z6x(x-5) == Z6x(x^3 + 2*x^2 + x)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_835 )
try:
 _st_.current_tex_line = _sage_const_855 
 _st_.commandline(_sage_const_14 , r"""
sage: Zx = ZZ['x']
sage: p1 = Zx([17,-4,2])
sage: p7 = Zx(x-2)*Zx(x+3)*Zx(x-5)
sage: p1(ZZ(2))
sage: p7(ZZ(-6)) == ZZ(-264)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_861 )
try:
 _st_.current_tex_line = _sage_const_872 
 _st_.commandline(_sage_const_15 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: p1 = Z6x([5,-4,2])
sage: p1(Z6(2)) == Z6(5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_877 )
try:
 _st_.current_tex_line = _sage_const_913 
 _st_.commandline(_sage_const_16 , r"""
sage: Zx = ZZ['x']
sage: P = Zx([2,-4,5])
sage: Q = Zx([5,0,-2,1])
sage: P+Q == Zx(x^3 +3*x^2 -4*x +7)
sage: P*Q == Zx(5*x^5 -14*x^4 +10*x^3+21*x^2-20*x +10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_919 )
try:
 _st_.current_tex_line = _sage_const_933 
 _st_.commandline(_sage_const_17 , r"""
sage: Z6x = Integers(6)['x']
sage: P = Z6x([2,-4,5])
sage: Q = Z6x([5,0,-2,1])
sage: P+Q == Z6x(x^3 +3*x^2 +2*x +1)
sage: P*Q == Z6x(5*x^5 +4*x^4 +4*x^3+3*x^2+4*x +4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_939 )
try:
 _st_.current_tex_line = _sage_const_994 
 _st_.commandline(_sage_const_18 , r"""
sage: Zx = ZZ['x']
sage: A = Zx([-9,0,0,2,0,1])
sage: B = Zx([-1,4,1])
sage: Q = Zx([-80,19,-4,1])
sage: P = Zx([-89,339])
sage: A == Q*B + P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1001 )
try:
 _st_.current_tex_line = _sage_const_1034 
 _st_.commandline(_sage_const_19 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^2-3)
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1038 )
try:
 _st_.current_tex_line = _sage_const_1058 
 _st_.commandline(_sage_const_20 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^7 + 3*x^6 + 3*x^5 + x^4 - x^3 - 3*x^2 - 3*x - 1)
sage: p.roots()
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1063 )
try:
 _st_.current_tex_line = _sage_const_1122 
 _st_.commandline(_sage_const_21 , r"""
sage: Qx = QQ['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: Qx.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1126 )
try:
 _st_.current_tex_line = _sage_const_1151 
 _st_.commandline(_sage_const_22 , r"""
sage: F5 = GF(5)
sage: F5x = F5['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: F5x.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1155 )
try:
 _st_.current_tex_line = _sage_const_502 
 _st_.commandline(_sage_const_23 , r"""
sage: import hashlib
sage: test = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
sage: empty_string = ""
sage: binary_string = empty_string.encode()
sage: hasher = hashlib.sha256(binary_string)
sage: result = hasher.hexdigest()
sage: type(result) # Sage represents digests as strings
sage: d = ZZ('0x'+ result) # conversion to an integer
sage: d.str(16) == test # hash is equal to test vector
sage: d.str(16) # hexadecimal representation
sage: d.str(2) # binary representation
sage: d.str(10) # decimal representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_515 )
try:
 _st_.current_tex_line = _sage_const_590 
 _st_.commandline(_sage_const_24 , r"""
sage: import hashlib
sage: def SHA256_H(x):
....:     Z5 = Integers(5) # define the group type
....:     hasher = hashlib.sha256(x) # compute SHA256
....:     digest = hasher.hexdigest()
....:     z = ZZ(digest, 16) # cast into integer
....:     z_bin = z.digits(base=2, padto=256) # cast to 256bits
....:     return Z5(2)^z_bin[0] * Z5(3)^z_bin[1]
sage: SHA256_H(b"") # evaluate on empty string
sage: SHA256_H(b"SHA") # possible images are {1,2,3}
sage: SHA256_H(b"Math")
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_602 )
try:
 _st_.current_tex_line = _sage_const_652 
 _st_.commandline(_sage_const_25 , r"""
sage: ZZ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_654 )
try:
 _st_.current_tex_line = _sage_const_717 
 _st_.commandline(_sage_const_26 , r"""
sage: ZZ['x']
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_719 )
try:
 _st_.current_tex_line = _sage_const_724 
 _st_.commandline(_sage_const_27 , r"""
sage: Integers(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_726 )
try:
 _st_.current_tex_line = _sage_const_799 
 _st_.commandline(_sage_const_28 , r"""
sage: import hashlib
sage: def Hash5(x):
....:     Z16 = Integers(16)
....:     hasher = hashlib.sha256(x) # compute SHA56
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16) # cast to integer
....:     d = d.str(2)[-4:] # keep 5 least significant bits
....:     d = ZZ(d, base=2) # cast to integer
....:     return Z16(d) # cast to Z16
sage: Hash5(b'')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_810 )
_st_.current_tex_line = _sage_const_812 
_st_.blockbegin()
try:
 H1 = list_plot([Hash5(ZZ(k).str(_sage_const_2 ).encode('utf-8')) for k in range(_sage_const_500 )])
except:
 _st_.goboom(_sage_const_814 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_816 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=H1)
except:
 _st_.goboom(_sage_const_816 )
_st_.current_tex_line = _sage_const_819 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_16 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H2 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_825 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_827 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=H2)
except:
 _st_.goboom(_sage_const_827 )
_st_.current_tex_line = _sage_const_830 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_31 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H3 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_836 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_838 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=H3)
except:
 _st_.goboom(_sage_const_838 )
try:
 _st_.current_tex_line = _sage_const_858 
 _st_.commandline(_sage_const_29 , r"""
sage: import hashlib
sage: Z23 = Integers(23)
sage: def Hash_mod23(x, k2):
....:     hasher = hashlib.sha256(x.encode('utf-8')) # Compute SHA256
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16) # cast to integer
....:     d = d.str(2)[-k2:] # keep k2+1 LSB
....:     d = ZZ(d, base=2) # cast to integer
....:     return Z23(d) # cast to Z23
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_868 )
_st_.current_tex_line = _sage_const_871 
_st_.blockbegin()
try:
 arr1 = []
 arr1 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr1[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_5 )] +=_sage_const_1 
 H3 = list_plot(arr1, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='red', legend_label='k2=5')
 arr2 = []
 arr2 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr2[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_7 )] +=_sage_const_1 
 H4 = list_plot(arr2, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='blue', legend_label='k2=7')
 arr3 = []
 arr3 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr3[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_9 )] +=_sage_const_1 
 H5 = list_plot(arr3, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='yellow', legend_label='k2=9')
 arr4 = []
 arr4 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr4[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_16 )] +=_sage_const_1 
 H6 = list_plot(arr4, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='black', legend_label='k2=16')
except:
 _st_.goboom(_sage_const_892 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_894 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=H3+H4+H5+H6)
except:
 _st_.goboom(_sage_const_894 )
try:
 _st_.current_tex_line = _sage_const_946 
 _st_.commandline(_sage_const_30 , r"""
sage: QQ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_948 )
try:
 _st_.current_tex_line = _sage_const_966 
 _st_.commandline(_sage_const_31 , r"""
sage: F2 = GF(2)
sage: F2(1) # Get an element from GF(2)
sage: F2(1) + F2(1) # Addition
sage: F2(1) / F2(1) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_971 )
try:
 _st_.current_tex_line = _sage_const_1269 
 _st_.commandline(_sage_const_32 , r"""
sage: Z3 = GF(3) # prime field
sage: Z3t.<t> = Z3[] # polynomials over Z3
sage: P = Z3t(t^2+1)
sage: P.is_irreducible()
sage: F3_2.<t> = GF(3^2, name='t', modulus=P) # Extension field F_3^2
sage: F3_2
sage: F3_2(t+2)*F3_2(2*t+2) == F3_2(2)
sage: F3_2(2*t+2)^(-1) # multiplicative inverse
sage: # verify our solution to (t+1)(x^2 + (2t+2)) = 2
sage: F3_2(t+1)*(F3_2(t)**2 + F3_2(2*t+2)) == F3_2(2)
sage: F3_2(t+1)*(F3_2(2*t)**2 + F3_2(2*t+2)) == F3_2(2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1281 )
_st_.current_tex_line = _sage_const_29 
_st_.blockbegin()
try:
 E1 = EllipticCurve([-_sage_const_2 ,_sage_const_1 ])
 C1 = E1.plot()
 F = GF(_sage_const_9973 )
 E2 = EllipticCurve(F, [-_sage_const_2 ,_sage_const_1 ])
 C2 = E2.plot()
except:
 _st_.goboom(_sage_const_35 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_37 
 _st_.plot(_sage_const_4 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_37 )
try:
 _st_.current_tex_line = _sage_const_42 
 _st_.plot(_sage_const_5 , format='notprovided', _p_=C2)
except:
 _st_.goboom(_sage_const_42 )
try:
 _st_.current_tex_line = _sage_const_51 
 _st_.commandline(_sage_const_33 , r"""
sage: F5 = GF(5) # define the base field
sage: a = F5(2) # parameter a
sage: b = F5(4) # parameter b
sage: # check discriminant
sage: F5(6)*(F5(4)*a^3+F5(27)*b^2) != F5(0)
sage: # Short Weierstrass curve over field F5
sage: E = EllipticCurve(F5,[a,b]) # y^2 == x^3 + ax +b
sage: # point on a curve
sage: P = E(0,2) # 2^2 == 0^3 + 2*0 + 4
sage: P.xy() # affine coordinates
sage: INF = E(0) # point at infinity
sage: try:  # point at infinity has no affine coordinates
....:     INF.xy()
....: except ZeroDivisionError:
....:     pass
sage: P = E.plot() # create a plotted version
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_68 )
_st_.current_tex_line = _sage_const_79 
_st_.blockbegin()
try:
 F5 = GF(_sage_const_5 )
 E1 = EllipticCurve(F5, [_sage_const_1 ,_sage_const_1 ])
 C1 = E1.plot()
except:
 _st_.goboom(_sage_const_83 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_85 
 _st_.plot(_sage_const_6 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_85 )
_st_.current_tex_line = _sage_const_101 
_st_.blockbegin()
try:
 F13 = GF(_sage_const_13 )
 TJJ_13 = EllipticCurve(F13, [_sage_const_8 ,_sage_const_8 ])
 CTJJ_13 = TJJ_13.plot()
except:
 _st_.goboom(_sage_const_105 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_107 
 _st_.plot(_sage_const_7 , format='notprovided', _p_=CTJJ_13)
except:
 _st_.goboom(_sage_const_107 )
try:
 _st_.current_tex_line = _sage_const_131 
 _st_.commandline(_sage_const_34 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: # Hexadecimal representation
sage: p.str(16)
sage: p.is_prime()
sage: p.nbits()
sage: Fp = GF(p)
sage: secp256k1 = EllipticCurve(Fp,[0,7])
sage: r = secp256k1.order() # number of elements
sage: r.str(16)
sage: r.is_prime()
sage: r.nbits()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_143 )
try:
 _st_.current_tex_line = _sage_const_335 
 _st_.commandline(_sage_const_35 , r"""
sage: F5 = GF(5)
sage: E1 = EllipticCurve(F5,[1,1])
sage: INF = E1(0) # point at infinity
sage: P1 = E1(0,1)
sage: P2 = E1(4,2)
sage: P3 = E1(0,4)
sage: R1 = E1(2,1)
sage: R2 = E1(3,4)
sage: R1 == P1+P2
sage: INF == P1+P3
sage: R2 == P2+P2
sage: R2 == 2*P2
sage: P3 == P3 + INF
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_349 )
try:
 _st_.current_tex_line = _sage_const_358 
 _st_.commandline(_sage_const_36 , r"""
sage: F13 = GF(13)
sage: TJJ = EllipticCurve(F13,[8,8])
sage: P = TJJ(4,0)
sage: INF = TJJ(0) # Point at infinity
sage: INF == P+P
sage: INF == 2*P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_365 )
try:
 _st_.current_tex_line = _sage_const_369 
 _st_.commandline(_sage_const_37 , r"""
sage: P = secp256k1.random_point()
sage: Q = secp256k1.random_point()
sage: R = P + Q
sage: P.xy()
sage: Q.xy()
sage: R.xy()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_376 )
try:
 _st_.current_tex_line = _sage_const_476 
 _st_.commandline(_sage_const_38 , r"""
sage: F13 = GF(13)
sage: TJJ = EllipticCurve(F13,[8,8])
sage: P = TJJ(5,11)
sage: INF = TJJ(0)
sage: 10*P == INF
sage: Q = TJJ(9,4)
sage: R = TJJ(4,0)
sage: 10*Q == R
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_485 )
try:
 _st_.current_tex_line = _sage_const_772 
 _st_.commandline(_sage_const_39 , r"""
sage: F13 = GF(13)
sage: L_MTJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(7)*y^2 == x^3 + F13(6)*x^2 +x:
....:             L_MTJJ.append((x,y))
sage: MTJJ = Set(L_MTJJ)
sage: # does not compute the point at infinity
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_781 )
try:
 _st_.current_tex_line = _sage_const_821 
 _st_.commandline(_sage_const_40 , r"""
sage: # Compute I of Montgomery form:
sage: L_I_MTJJ = []
sage: for (x,y) in L_MTJJ: # LMTJJ as defined previously
....:     v = (F13(3)*x + F13(6))/(F13(3)*F13(7))
....:     w = y/F13(7)
....:     L_I_MTJJ.append((v,w))
sage: I_MTJJ = Set(L_I_MTJJ)
sage: # Computation \concept{short Weierstrass} form
sage: C_WTJJ = EllipticCurve(F13,[8,8])
sage: L_WTJJ = [P.xy() for P in C_WTJJ.points() if P.order() > 1]
sage: WTJJ = Set(L_WTJJ)
sage: # check I(Montgomery) == Weierstrass
sage: WTJJ == I_MTJJ
sage: # check the inverse map I^(-1)
sage: L_IINV_WTJJ = []
sage: for (v,w) in L_WTJJ:
....:     x = F13(7)*(v-F13(4))
....:     y = F13(7)*w
....:     L_IINV_WTJJ.append((x,y))
sage: IINV_WTJJ = Set(L_IINV_WTJJ)
sage: MTJJ == IINV_WTJJ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_843 )
try:
 _st_.current_tex_line = _sage_const_957 
 _st_.commandline(_sage_const_41 , r"""
sage: F13 = GF(13)
sage: L_ETJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(3)*x^2 + y^2 == 1+ F13(8)*x^2*y^2:
....:             L_ETJJ.append((x,y))
sage: ETJJ = Set(L_ETJJ)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_965 )
try:
 _st_.current_tex_line = _sage_const_1085 
 _st_.commandline(_sage_const_42 , r"""
sage: p = ZZ(13)
sage: # large prime factor
sage: r = ZZ(5)
sage: k = ZZ(1)
sage: while k < r:  # Fermat's little theorem
....:     if (p^k-1)%r == 0:
....:         break
....:     k=k+1
sage: k
sage: # small prime factor
sage: r = ZZ(2)
sage: k = ZZ(1)
sage: while k < r:  # Fermat's little theorem
....:     if (p^k-1)%r == 0:
....:         break
....:     k=k+1
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1103 )
try:
 _st_.current_tex_line = _sage_const_1111 
 _st_.commandline(_sage_const_43 , r"""
sage: p = ZZ(115792089237316195423570985008687907853269984665640564039457584007908834671663)
sage: r = ZZ(115792089237316195423570985008687907852837564279074904382605163141518161494337)
sage: k = ZZ(1)
sage: while k < 1000:
....:     if (p^k-1)%r == 0:
....:         break
....:     k=k+1
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1120 )
try:
 _st_.current_tex_line = _sage_const_1139 
 _st_.commandline(_sage_const_44 , r"""
sage: F5= GF(5)
sage: F5t.<t> = F5[]
sage: P_MOD_2 = F5t(t^2+2)
sage: P_MOD_2.is_irreducible()
sage: F5_2.<t> = GF(5^2, name='t', modulus=P_MOD_2)
sage: E1F5_2 = EllipticCurve(F5_2,[1,1])
sage: E1F5_2.order()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1147 )
try:
 _st_.current_tex_line = _sage_const_1198 
 _st_.commandline(_sage_const_45 , r"""
sage: INF = E1F5_2(0) # Point at infinity
sage: L_E1_3 = []
sage: for p in E1F5_2:
....:     if 3*p == INF:
....:         L_E1_3.append(p)
sage: E1_3 = Set(L_E1_3) # Full 3-torsion set
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1205 )
try:
 _st_.current_tex_line = _sage_const_1216 
 _st_.commandline(_sage_const_46 , r"""
sage: # define the extension field
sage: F13= GF(13) # prime field
sage: F13t.<t> = F13[] # polynomials over t
sage: P_MOD_4 = F13t(t^4+2) # degree 4 irreducible polynomial
sage: P_MOD_4.is_irreducible()
sage: F13_4.<t> = GF(13^4, name='t', modulus=P_MOD_4)
sage: TJJF13_4 = EllipticCurve(F13_4,[8,8]) # TJJ extension
sage: # compute the full 5-torsion
sage: INF = TJJF13_4(0) # point at infinity
sage: L_TJJF13_4_5 = INF.division_points(5) # [5]P == INF
sage: TJJF13_4_5 = Set(L_TJJF13_4_5)
sage: TJJF13_4_5.cardinality() # number of elements
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1229 )
try:
 _st_.current_tex_line = _sage_const_1231 
 _st_.commandline(_sage_const_47 , r"""
sage: # define the extension field
sage: P_MOD_3 = F13t(t^3+2) # degree 3 irreducible polynomial
sage: P_MOD_3.is_irreducible()
sage: F13_3.<t> = GF(13^3, name='t', modulus=P_MOD_3)
sage: TJJF13_3 = EllipticCurve(F13_3,[8,8]) # TJJ extension
sage: # compute the 5-torsion
sage: INF = TJJF13_3(0)
sage: L_TJJF13_3_5 = INF.division_points(5) # [5]P == INF
sage: TJJF13_3_5 = Set(L_TJJF13_3_5) # $5$-torsion
sage: TJJF13_3_5.cardinality() # number of elements
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1242 )
try:
 _st_.current_tex_line = _sage_const_1301 
 _st_.commandline(_sage_const_48 , r"""
sage: L_G1 = []
sage: for P in E1_3:
....:     PiP = E1F5_2([a.frobenius() for a in P]) # pi(P)
....:     if P == PiP:
....:         L_G1.append(P)
sage: G1 = Set(L_G1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1308 )
try:
 _st_.current_tex_line = _sage_const_1312 
 _st_.commandline(_sage_const_49 , r"""
sage: L_G2 = []
sage: for P in E1_3:
....:     PiP = E1F5_2([a.frobenius() for a in P]) # pi(P)
....:     pP = 5*P # [5]P
....:     if pP == PiP:
....:         L_G2.append(P)
sage: G2 = Set(L_G2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1320 )
try:
 _st_.current_tex_line = _sage_const_1328 
 _st_.commandline(_sage_const_50 , r"""
sage: L_TJJ_G1 = []
sage: for P in TJJF13_4_5:
....:     PiP = TJJF13_4([a.frobenius() for a in P]) # pi(P)
....:     if P == PiP:
....:         L_TJJ_G1.append(P)
sage: TJJ_G1 = Set(L_TJJ_G1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1335 )
try:
 _st_.current_tex_line = _sage_const_1339 
 _st_.commandline(_sage_const_51 , r"""
sage: L_TJJ_G2 = []
sage: for P in TJJF13_4_5:
....:     PiP = TJJF13_4([a.frobenius() for a in P]) # pi(P)
....:     pP = 13*P # [13]P
....:     if pP == PiP: # pi(P) ==[13]P
....:         L_TJJ_G2.append(P)
sage: TJJ_G2 = Set(L_TJJ_G2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1347 )
try:
 _st_.current_tex_line = _sage_const_1422 
 _st_.commandline(_sage_const_52 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: P_MOD_4 = F13t(t^4+2)
sage: F13_4.<t> = GF(13^4, name='t', modulus=P_MOD_4)
sage: TJJF13_4 = EllipticCurve(F13_4,[8,8])
sage: P=TJJF13_4([7,2])
sage: Q=TJJF13_4([9*t^2+7,12*t^3+2*t])
sage: P.weil_pairing(Q,5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1431 )
try:
 _st_.current_tex_line = _sage_const_1489 
 _st_.commandline(_sage_const_53 , r"""
sage: import hashlib
sage: def try_hash(s,c):
....:     s_1 = s+c # string concatenation
....:     hasher = hashlib.sha256(s_1.encode('utf-8')) # compute SHA256
....:     digest = hasher.hexdigest()
....:     z = ZZ(digest, 16) # cast into integer
....:     z_bin = z.digits(base=2, padto=256) # cast to 256 bits
....:     x = z_bin[0]*2^0 + z_bin[1]*2^1 + z_bin[2]*2^2+z_bin[3]*2^3
....:     return (x,z_bin[4])
sage: try_hash('1110010000','0')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1500 )
try:
 _st_.current_tex_line = _sage_const_1503 
 _st_.commandline(_sage_const_54 , r"""
sage: try_hash('1110010000','1')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1505 )
try:
 _st_.current_tex_line = _sage_const_1508 
 _st_.commandline(_sage_const_55 , r"""
sage: try_hash('1110010000','10')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1510 )
try:
 _st_.current_tex_line = _sage_const_1517 
 _st_.commandline(_sage_const_56 , r"""
sage: P = TJJ_13(12,8)
sage: (4*P).xy()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1520 )
try:
 _st_.current_tex_line = _sage_const_1584 
 _st_.commandline(_sage_const_57 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
sage: t = p + 1 -r
sage: t.nbits()
sage: abs(RR(t)) <= 2*sqrt(RR(p))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1590 )
try:
 _st_.current_tex_line = _sage_const_1623 
 _st_.commandline(_sage_const_58 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: F = GF(p)
sage: j = F(1728)*((F(4)*F(0)^3)/(F(4)*F(0)^3+F(27)*F(7)^2))
sage: j == F(0)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1628 )
try:
 _st_.current_tex_line = _sage_const_1683 
 _st_.commandline(_sage_const_59 , r"""
sage: z = ComplexField(100)(0,1)
sage: z # (0+1i)
sage: elliptic_j(z)
sage: # j-function only defined for positive imaginary arguments
sage: z = ComplexField(100)(1,-1)
sage: try:
....:     elliptic_j(z)
....: except PariError:
....:     pass
sage: # root at (-1+i sqrt(3))/2
sage: z = ComplexField(100)(-1,sqrt(3))/2
sage: elliptic_j(z)
sage: elliptic_j(z).imag().round()
sage: elliptic_j(z).real().round()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1698 )
try:
 _st_.current_tex_line = _sage_const_1876 
 _st_.commandline(_sage_const_60 , r"""
sage: D = -3
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
sage: t = p+1-r
sage: v_sqr = (4*p - t^2)/abs(D)
sage: v_sqr.is_integer()
sage: v = sqrt(v_sqr)
sage: v.is_integer()
sage: 4*p == t^2 + abs(D)*v^2
sage: v
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1887 )
try:
 _st_.current_tex_line = _sage_const_1893 
 _st_.commandline(_sage_const_61 , r"""
sage: F = GF(p)
sage: for c2 in F:
....:     try: # quadratic residue
....:         _ = c2.nth_root(2)
....:     except ValueError: # quadratic non-residue
....:         break
sage: c2
sage: for c3 in F:
....:     try:
....:         _ = c3.nth_root(3)
....:     except ValueError:
....:         break
sage: c3
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1907 )
try:
 _st_.current_tex_line = _sage_const_1910 
 _st_.commandline(_sage_const_62 , r"""
sage: C1 = EllipticCurve(F,[0,1])
sage: C1.order() == r
sage: C2 = EllipticCurve(F,[0,c2^3])
sage: C2.order() == r
sage: C3 = EllipticCurve(F,[0,c3^2])
sage: C3.order() == r
sage: C4 = EllipticCurve(F,[0,c3^2*c2^3])
sage: C4.order() == r
sage: C5 = EllipticCurve(F,[0,c3^(-2)])
sage: C5.order() == r
sage: C6 = EllipticCurve(F,[0,c3^(-2)*c2^3])
sage: C6.order() == r
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1923 )
try:
 _st_.current_tex_line = _sage_const_1935 
 _st_.commandline(_sage_const_63 , r"""
sage: b1=86844066927987146567678238756515930889952488499230423029593188005931626003754
sage: for b2 in F:
....:     try:
....:         d = (b2/b1).nth_root(3)
....:         try:
....:             _ = d.nth_root(2)
....:             if d != 0:
....:                 break
....:         except ValueError:
....:             pass
....:     except ValueError:
....:         pass
sage: b2
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1949 )
try:
 _st_.current_tex_line = _sage_const_2003 
 _st_.commandline(_sage_const_64 , r"""
sage: for k in range(1,42): # Fermat's little theorem
....:     if (43^k-1)%13 == 0:
....:         break
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2008 )
try:
 _st_.current_tex_line = _sage_const_2025 
 _st_.commandline(_sage_const_65 , r"""
sage: F43 = GF(43)
sage: c2 = F43(5)
....: try: # quadratic residue
....:     c2.nth_root(2)
....: except ValueError: # quadratic non-residue
....:     c2
sage: c3 =F43(36)
....: try:
....:     c3.nth_root(3)
....: except ValueError:
....:     c3
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2037 )
try:
 _st_.current_tex_line = _sage_const_2041 
 _st_.commandline(_sage_const_66 , r"""
sage: BLS61 = EllipticCurve(F43,[0,1])
sage: BLS61.order() == 39
sage: BLS62 = EllipticCurve(F43,[0,c2^3])
sage: BLS62.order() == 39
sage: BLS63 = EllipticCurve(F43,[0,c3^2])
sage: BLS63.order() == 39
sage: BLS64 = EllipticCurve(F43,[0,c3^2*c2^3])
sage: BLS64.order() == 39
sage: BLS65 = EllipticCurve(F43,[0,c3^(-2)])
sage: BLS65.order() == 39
sage: BLS66 = EllipticCurve(F43,[0,c3^(-2)*c2^3])
sage: BLS66.order() == 39
sage: BLS6 = BLS63 # our BLS6 curve in the book
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2055 )
_st_.current_tex_line = _sage_const_2064 
_st_.blockbegin()
try:
 BLS63p = BLS63.plot()
except:
 _st_.goboom(_sage_const_2066 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_2068 
 _st_.plot(_sage_const_8 , format='notprovided', _p_=BLS63p)
except:
 _st_.goboom(_sage_const_2068 )
try:
 _st_.current_tex_line = _sage_const_2091 
 _st_.commandline(_sage_const_67 , r"""
sage: P = BLS6(9,2)
sage: Q = 3*P
sage: Q.xy()
sage: BLS6_13 = []
sage: for x in range(0,13): # cyclic of order 13
....:     P = x*Q
....:     BLS6_13.append(P)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2099 )
try:
 _st_.current_tex_line = _sage_const_2177 
 _st_.commandline(_sage_const_68 , r"""
sage: F43 = GF(43)
sage: F43t.<t> = F43[]
sage: p = F43t(t^6+6)
sage: p.is_irreducible()
sage: F43_6.<v> = GF(43^6, name='v', modulus=p)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2183 )
try:
 _st_.current_tex_line = _sage_const_2191 
 _st_.commandline(_sage_const_69 , r"""
sage: BLS6 = EllipticCurve (F43_6,[0 ,6]) # curve extension
sage: INF = BLS6(0) # point at infinity
sage: for P in INF.division_points(13): # full 13-torsion
....: # PI(P) == [q]P
....:     if P.order() == 13: # exclude point at infinity
....:         PiP = BLS6([a.frobenius() for a in P])
....:         qP = 43*P
....:         if PiP == qP:
....:             break
sage: P.xy()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2202 )
try:
 _st_.current_tex_line = _sage_const_2210 
 _st_.commandline(_sage_const_70 , r"""
sage: Q = BLS6(7*v^2,16*v^3)
sage: BLS6_13_2 = []
sage: for x in range(0,13):
....:     P = x*Q
....:     BLS6_13_2.append(P)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2216 )
try:
 _st_.current_tex_line = _sage_const_2257 
 _st_.commandline(_sage_const_71 , r"""
sage: g1 = BLS6([13,15])
sage: g2 = BLS6([7*v^2, 16*v^3])
sage: g1.weil_pairing(g2,13)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2261 )
try:
 _st_.current_tex_line = _sage_const_1337 
 _st_.commandline(_sage_const_72 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t((t-5)*(t-7))
sage: A2 = F13t.lagrange_polynomial([(5,1),(7,0)])
sage: A5 = F13t.lagrange_polynomial([(5,0),(7,1)])
sage: T == F13t(t^2 + t + 9)
sage: A2 == F13t(6*t + 10)
sage: A5 == F13t(7*t + 4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1346 )
try:
 _st_.current_tex_line = _sage_const_1401 
 _st_.commandline(_sage_const_73 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t(t^2 + t + 9)
sage: P = F13t((2*(6*t+10)+6*(7*t+4))*(3*(6*t+10)+4*(7*t +4))-(11*(7*t+4)+6*(6*t+10)))
sage: P == T
sage: P % T # remainder
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1408 )
try:
 _st_.current_tex_line = _sage_const_1422 
 _st_.commandline(_sage_const_74 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t(t^2 + t + 9)
sage: P = F13t((2*(6*t+10)+8*(7*t+4))*(3*(6*t+10)+4*(7*t+4))-(8*(6*t+10)+11*(7*t+4)))
sage: P == F13t(8*t^2 + 6)
sage: P % T # remainder
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1429 )
_st_.endofdoc()

