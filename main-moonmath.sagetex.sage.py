## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file /home/mirco/work/Least-Authority/MMM/moonmath-manual/main-moonmath.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_93 = Integer(93); _sage_const_0 = Integer(0); _sage_const_104 = Integer(104); _sage_const_121 = Integer(121); _sage_const_1 = Integer(1); _sage_const_124 = Integer(124); _sage_const_193 = Integer(193); _sage_const_2 = Integer(2); _sage_const_198 = Integer(198); _sage_const_209 = Integer(209); _sage_const_3 = Integer(3); _sage_const_213 = Integer(213); _sage_const_227 = Integer(227); _sage_const_4 = Integer(4); _sage_const_230 = Integer(230); _sage_const_290 = Integer(290); _sage_const_5 = Integer(5); _sage_const_292 = Integer(292); _sage_const_374 = Integer(374); _sage_const_6 = Integer(6); _sage_const_381 = Integer(381); _sage_const_410 = Integer(410); _sage_const_7 = Integer(7); _sage_const_413 = Integer(413); _sage_const_485 = Integer(485); _sage_const_8 = Integer(8); _sage_const_487 = Integer(487); _sage_const_565 = Integer(565); _sage_const_9 = Integer(9); _sage_const_569 = Integer(569); _sage_const_634 = Integer(634); _sage_const_10 = Integer(10); _sage_const_636 = Integer(636); _sage_const_682 = Integer(682); _sage_const_11 = Integer(11); _sage_const_687 = Integer(687); _sage_const_750 = Integer(750); _sage_const_12 = Integer(12); _sage_const_763 = Integer(763); _sage_const_785 = Integer(785); _sage_const_13 = Integer(13); _sage_const_794 = Integer(794); _sage_const_814 = Integer(814); _sage_const_14 = Integer(14); _sage_const_820 = Integer(820); _sage_const_831 = Integer(831); _sage_const_15 = Integer(15); _sage_const_836 = Integer(836); _sage_const_870 = Integer(870); _sage_const_16 = Integer(16); _sage_const_876 = Integer(876); _sage_const_890 = Integer(890); _sage_const_17 = Integer(17); _sage_const_896 = Integer(896); _sage_const_949 = Integer(949); _sage_const_18 = Integer(18); _sage_const_956 = Integer(956); _sage_const_984 = Integer(984); _sage_const_19 = Integer(19); _sage_const_988 = Integer(988); _sage_const_1008 = Integer(1008); _sage_const_20 = Integer(20); _sage_const_1013 = Integer(1013); _sage_const_1072 = Integer(1072); _sage_const_21 = Integer(21); _sage_const_1076 = Integer(1076); _sage_const_1101 = Integer(1101); _sage_const_22 = Integer(22); _sage_const_1105 = Integer(1105); _sage_const_315 = Integer(315); _sage_const_23 = Integer(23); _sage_const_327 = Integer(327); _sage_const_388 = Integer(388); _sage_const_24 = Integer(24); _sage_const_397 = Integer(397); _sage_const_399 = Integer(399); _sage_const_500 = Integer(500); _sage_const_401 = Integer(401); _sage_const_403 = Integer(403); _sage_const_406 = Integer(406); _sage_const_100000 = Integer(100000); _sage_const_10000 = Integer(10000); _sage_const_412 = Integer(412); _sage_const_414 = Integer(414); _sage_const_417 = Integer(417); _sage_const_31 = Integer(31); _sage_const_423 = Integer(423); _sage_const_425 = Integer(425); _sage_const_445 = Integer(445); _sage_const_25 = Integer(25); _sage_const_455 = Integer(455); _sage_const_458 = Integer(458); _sage_const_479 = Integer(479); _sage_const_481 = Integer(481); _sage_const_26 = Integer(26); _sage_const_691 = Integer(691); _sage_const_711 = Integer(711); _sage_const_27 = Integer(27); _sage_const_716 = Integer(716); _sage_const_978 = Integer(978); _sage_const_28 = Integer(28); _sage_const_990 = Integer(990); _sage_const_39 = Integer(39); _sage_const_9973 = Integer(9973); _sage_const_45 = Integer(45); _sage_const_47 = Integer(47); _sage_const_51 = Integer(51); _sage_const_61 = Integer(61); _sage_const_29 = Integer(29); _sage_const_77 = Integer(77); _sage_const_90 = Integer(90); _sage_const_94 = Integer(94); _sage_const_96 = Integer(96); _sage_const_113 = Integer(113); _sage_const_117 = Integer(117); _sage_const_119 = Integer(119); _sage_const_143 = Integer(143); _sage_const_30 = Integer(30); _sage_const_155 = Integer(155); _sage_const_184 = Integer(184); _sage_const_297 = Integer(297); _sage_const_32 = Integer(32); _sage_const_311 = Integer(311); _sage_const_319 = Integer(319); _sage_const_33 = Integer(33); _sage_const_326 = Integer(326); _sage_const_330 = Integer(330); _sage_const_34 = Integer(34); _sage_const_343 = Integer(343); _sage_const_440 = Integer(440); _sage_const_35 = Integer(35); _sage_const_449 = Integer(449); _sage_const_709 = Integer(709); _sage_const_36 = Integer(36); _sage_const_718 = Integer(718); _sage_const_748 = Integer(748); _sage_const_37 = Integer(37); _sage_const_770 = Integer(770); _sage_const_871 = Integer(871); _sage_const_38 = Integer(38); _sage_const_879 = Integer(879); _sage_const_981 = Integer(981); _sage_const_995 = Integer(995); _sage_const_1001 = Integer(1001); _sage_const_40 = Integer(40); _sage_const_1026 = Integer(1026); _sage_const_41 = Integer(41); _sage_const_1034 = Integer(1034); _sage_const_1059 = Integer(1059); _sage_const_42 = Integer(42); _sage_const_1066 = Integer(1066); _sage_const_1078 = Integer(1078); _sage_const_43 = Integer(43); _sage_const_1093 = Integer(1093); _sage_const_1095 = Integer(1095); _sage_const_44 = Integer(44); _sage_const_1108 = Integer(1108); _sage_const_1162 = Integer(1162); _sage_const_1169 = Integer(1169); _sage_const_1171 = Integer(1171); _sage_const_46 = Integer(46); _sage_const_1179 = Integer(1179); _sage_const_1186 = Integer(1186); _sage_const_1193 = Integer(1193); _sage_const_1195 = Integer(1195); _sage_const_48 = Integer(48); _sage_const_1203 = Integer(1203); _sage_const_1377 = Integer(1377); _sage_const_49 = Integer(49); _sage_const_1389 = Integer(1389); _sage_const_1392 = Integer(1392); _sage_const_50 = Integer(50); _sage_const_1394 = Integer(1394); _sage_const_1397 = Integer(1397); _sage_const_1400 = Integer(1400); _sage_const_1412 = Integer(1412); _sage_const_52 = Integer(52); _sage_const_1415 = Integer(1415); _sage_const_1479 = Integer(1479); _sage_const_53 = Integer(53); _sage_const_1485 = Integer(1485); _sage_const_1518 = Integer(1518); _sage_const_54 = Integer(54); _sage_const_1523 = Integer(1523); _sage_const_1576 = Integer(1576); _sage_const_55 = Integer(55); _sage_const_1591 = Integer(1591); _sage_const_1769 = Integer(1769); _sage_const_56 = Integer(56); _sage_const_1780 = Integer(1780); _sage_const_1786 = Integer(1786); _sage_const_57 = Integer(57); _sage_const_1800 = Integer(1800); _sage_const_1803 = Integer(1803); _sage_const_58 = Integer(58); _sage_const_1816 = Integer(1816); _sage_const_1828 = Integer(1828); _sage_const_59 = Integer(59); _sage_const_1842 = Integer(1842); _sage_const_1893 = Integer(1893); _sage_const_60 = Integer(60); _sage_const_1898 = Integer(1898); _sage_const_1915 = Integer(1915); _sage_const_1927 = Integer(1927); _sage_const_1931 = Integer(1931); _sage_const_62 = Integer(62); _sage_const_1945 = Integer(1945); _sage_const_1954 = Integer(1954); _sage_const_1956 = Integer(1956); _sage_const_1958 = Integer(1958); _sage_const_1981 = Integer(1981); _sage_const_63 = Integer(63); _sage_const_1989 = Integer(1989); _sage_const_2066 = Integer(2066); _sage_const_64 = Integer(64); _sage_const_2072 = Integer(2072); _sage_const_2080 = Integer(2080); _sage_const_65 = Integer(65); _sage_const_2091 = Integer(2091); _sage_const_2099 = Integer(2099); _sage_const_66 = Integer(66); _sage_const_2105 = Integer(2105); _sage_const_2145 = Integer(2145); _sage_const_67 = Integer(67); _sage_const_2149 = Integer(2149); _sage_const_1269 = Integer(1269); _sage_const_68 = Integer(68); _sage_const_1278 = Integer(1278); _sage_const_1334 = Integer(1334); _sage_const_69 = Integer(69); _sage_const_1341 = Integer(1341); _sage_const_1355 = Integer(1355); _sage_const_70 = Integer(70); _sage_const_1362 = Integer(1362)## This file (main-moonmath.sagetex.sage) was *autogenerated* from main-moonmath.tex with sagetex.sty version 2021/10/16 v3.6.
import sagetex
_st_ = sagetex.SageTeXProcessor('main-moonmath', version='2021/10/16 v3.6', version_check=True)
try:
 _st_.current_tex_line = _sage_const_93 
 _st_.commandline(_sage_const_0 , r"""
sage: ZZ # A sage notation for the integers
sage: NN # A sage notation for the natural numbers
sage: QQ # A sage notation for the rational numbers
sage: ZZ(5) # Get an element from the integers
sage: ZZ(5) + ZZ(3)
sage: ZZ(5) * NN(3)
sage: ZZ.random_element(10**50)
sage: ZZ(27713).str(2) # Binary string representation
sage: NN(27713).str(2) # Binary string representation
sage: ZZ(27713).str(16) # Hexadecimal string representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_104 )
try:
 _st_.current_tex_line = _sage_const_121 
 _st_.commandline(_sage_const_1 , r"""
sage: n = NN(504)
sage: factor(n)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_124 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.commandline(_sage_const_2 , r"""
sage: ZZ(-17) // ZZ(4) # Integer quotient
sage: ZZ(-17) % ZZ(4) # remainder
sage: ZZ(4).divides(ZZ(-17)) # self divides other
sage: ZZ(4).divides(ZZ(12))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_198 )
try:
 _st_.current_tex_line = _sage_const_209 
 _st_.commandline(_sage_const_3 , r"""
sage: ZZ(-17) // ZZ(-4) # Integer quotient
sage: ZZ(-17) % ZZ(-4) # remainder
sage: ZZ(-17).quo_rem(ZZ(-4)) # not Euclidean division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_213 )
try:
 _st_.current_tex_line = _sage_const_227 
 _st_.commandline(_sage_const_4 , r"""
sage: ZZ(143785).quo_rem(ZZ(17))
sage: ZZ(143785) == ZZ(8457)*ZZ(17) + ZZ(16) # check
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_230 )
try:
 _st_.current_tex_line = _sage_const_290 
 _st_.commandline(_sage_const_5 , r"""
sage: ZZ(12).xgcd(ZZ(5)) # (gcd(a,b),s,t)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_292 )
try:
 _st_.current_tex_line = _sage_const_374 
 _st_.commandline(_sage_const_6 , r"""
sage: ZZ(137).gcd(ZZ(64))
sage: ZZ(64)^ ZZ(137) % ZZ(137) == ZZ(64) % ZZ(137)
sage: ZZ(64)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
sage: ZZ(1918).gcd(ZZ(137))
sage: ZZ(1918)^ ZZ(137) % ZZ(137) == ZZ(1918) % ZZ(137)
sage: ZZ(1918)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_381 )
try:
 _st_.current_tex_line = _sage_const_410 
 _st_.commandline(_sage_const_7 , r"""
sage: (ZZ(7)* (ZZ(2)*ZZ(4) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(4) - ZZ(102))  % ZZ(6)
sage: (ZZ(7)* (ZZ(2)*ZZ(76) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(76) - ZZ(102))  % ZZ(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_413 )
try:
 _st_.current_tex_line = _sage_const_485 
 _st_.commandline(_sage_const_8 , r"""
sage: CRT_list([4,1,3,0], [7,3,5,11])
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_487 )
try:
 _st_.current_tex_line = _sage_const_565 
 _st_.commandline(_sage_const_9 , r"""
sage: Z6 = Integers(6)
sage: Z6(2) + Z6(5)
sage: Z6(7)*(Z6(2)*Z6(4)+Z6(21))+Z6(11) == Z6(4) - Z6(102)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_569 )
try:
 _st_.current_tex_line = _sage_const_634 
 _st_.commandline(_sage_const_10 , r"""
sage: ZZ(6).xgcd(ZZ(5))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_636 )
try:
 _st_.current_tex_line = _sage_const_682 
 _st_.commandline(_sage_const_11 , r"""
sage: Z5 = Integers(5)
sage: Z5(3)**(5-2)
sage: Z5(3)**(-1)
sage: Z5(3)**(5-2) == Z5(3)**(-1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_687 )
try:
 _st_.current_tex_line = _sage_const_750 
 _st_.commandline(_sage_const_12 , r"""
sage: Zx = ZZ['x'] # integer polynomials with indeterminate x
sage: Zt.<t> = ZZ[] # integer polynomials with indeterminate t
sage: Zx
sage: Zt
sage: p1 = Zx([17,-4,2])
sage: p1
sage: p1.degree()
sage: p1.leading_coefficient()
sage: p2 = Zt(t^23)
sage: p2
sage: p6 = Zx([0])
sage: p6.degree()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_763 )
try:
 _st_.current_tex_line = _sage_const_785 
 _st_.commandline(_sage_const_13 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: Z6x
sage: p1 = Z6x([5,-4,2])
sage: p1
sage: p1 = Z6x([17,-4,2])
sage: p1
sage: Z6x(x-2)*Z6x(x+3)*Z6x(x-5) == Z6x(x^3 + 2*x^2 + x)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_794 )
try:
 _st_.current_tex_line = _sage_const_814 
 _st_.commandline(_sage_const_14 , r"""
sage: Zx = ZZ['x']
sage: p1 = Zx([17,-4,2])
sage: p7 = Zx(x-2)*Zx(x+3)*Zx(x-5)
sage: p1(ZZ(2))
sage: p7(ZZ(-6)) == ZZ(-264)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_820 )
try:
 _st_.current_tex_line = _sage_const_831 
 _st_.commandline(_sage_const_15 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: p1 = Z6x([5,-4,2])
sage: p1(Z6(2)) == Z6(5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_836 )
try:
 _st_.current_tex_line = _sage_const_870 
 _st_.commandline(_sage_const_16 , r"""
sage: Zx = ZZ['x']
sage: P = Zx([2,-4,5])
sage: Q = Zx([5,0,-2,1])
sage: P+Q == Zx(x^3 +3*x^2 -4*x +7)
sage: P*Q == Zx(5*x^5 -14*x^4 +10*x^3+21*x^2-20*x +10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_876 )
try:
 _st_.current_tex_line = _sage_const_890 
 _st_.commandline(_sage_const_17 , r"""
sage: Z6x = Integers(6)['x']
sage: P = Z6x([2,-4,5])
sage: Q = Z6x([5,0,-2,1])
sage: P+Q == Z6x(x^3 +3*x^2 +2*x +1)
sage: P*Q == Z6x(5*x^5 +4*x^4 +4*x^3+3*x^2+4*x +4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_896 )
try:
 _st_.current_tex_line = _sage_const_949 
 _st_.commandline(_sage_const_18 , r"""
sage: Zx = ZZ['x']
sage: A = Zx([-9,0,0,2,0,1])
sage: B = Zx([-1,4,1])
sage: Q = Zx([-80,19,-4,1])
sage: P = Zx([-89,339])
sage: A == Q*B + P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_956 )
try:
 _st_.current_tex_line = _sage_const_984 
 _st_.commandline(_sage_const_19 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^2-3)
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_988 )
try:
 _st_.current_tex_line = _sage_const_1008 
 _st_.commandline(_sage_const_20 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^7 + 3*x^6 + 3*x^5 + x^4 - x^3 - 3*x^2 - 3*x - 1)
sage: p.roots()
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1013 )
try:
 _st_.current_tex_line = _sage_const_1072 
 _st_.commandline(_sage_const_21 , r"""
sage: Qx = QQ['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: Qx.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1076 )
try:
 _st_.current_tex_line = _sage_const_1101 
 _st_.commandline(_sage_const_22 , r"""
sage: F5 = GF(5)
sage: F5x = F5['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: F5x.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1105 )
try:
 _st_.current_tex_line = _sage_const_315 
 _st_.commandline(_sage_const_23 , r"""
sage: import hashlib
sage: test = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
sage: hasher = hashlib.sha256(b'')
sage: str = hasher.hexdigest()
sage: type(str)
sage: d = ZZ('0x'+ str) # conversion to integer type
sage: d.str(16) == str
sage: d.str(16) == test
sage: d.str(16)
sage: d.str(2)
sage: d.str(10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_327 )
try:
 _st_.current_tex_line = _sage_const_388 
 _st_.commandline(_sage_const_24 , r"""
sage: import hashlib
sage: def Hash5(x):
....:     hasher = hashlib.sha256(x)
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16)
....:     d = d.str(2)[-4:]
....:     return ZZ(d,base=2)
sage: Hash5(b'')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_397 )
_st_.current_tex_line = _sage_const_399 
_st_.blockbegin()
try:
 H1 = list_plot([Hash5(ZZ(k).str(_sage_const_2 ).encode('utf-8')) for k in range(_sage_const_500 )])
except:
 _st_.goboom(_sage_const_401 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_403 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=H1)
except:
 _st_.goboom(_sage_const_403 )
_st_.current_tex_line = _sage_const_406 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_16 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H2 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_412 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_414 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=H2)
except:
 _st_.goboom(_sage_const_414 )
_st_.current_tex_line = _sage_const_417 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_31 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H3 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_423 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_425 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=H3)
except:
 _st_.goboom(_sage_const_425 )
try:
 _st_.current_tex_line = _sage_const_445 
 _st_.commandline(_sage_const_25 , r"""
sage: import hashlib
sage: Z23 = Integers(23)
sage: def Hash_mod23(x, k2):
....:     hasher = hashlib.sha256(x.encode('utf-8'))
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16)
....:     d = d.str(2)[-k2:]
....:     d = ZZ(d, base=2)
....:     return Z23(d)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_455 )
_st_.current_tex_line = _sage_const_458 
_st_.blockbegin()
try:
 arr1 = []
 arr1 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr1[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_5 )] +=_sage_const_1 
 H3 = list_plot(arr1, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='red', legend_label='k=5')
 arr2 = []
 arr2 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr2[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_7 )] +=_sage_const_1 
 H4 = list_plot(arr2, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='blue', legend_label='k=7')
 arr3 = []
 arr3 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr3[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_9 )] +=_sage_const_1 
 H5 = list_plot(arr3, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='yellow', legend_label='k=9')
 arr4 = []
 arr4 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr4[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_16 )] +=_sage_const_1 
 H6 = list_plot(arr4, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='black', legend_label='k=16')
except:
 _st_.goboom(_sage_const_479 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_481 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=H3+H4+H5+H6)
except:
 _st_.goboom(_sage_const_481 )
try:
 _st_.current_tex_line = _sage_const_687 
 _st_.commandline(_sage_const_26 , r"""
sage: QQ
sage: QQ(1/5) # Get an element from the field of rational numbers
sage: QQ(1/5) / QQ(3) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_691 )
try:
 _st_.current_tex_line = _sage_const_711 
 _st_.commandline(_sage_const_27 , r"""
sage: F2 = GF(2)
sage: F2(1) # Get an element from GF(2)
sage: F2(1) + F2(1) # Addition
sage: F2(1) / F2(1) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_716 )
try:
 _st_.current_tex_line = _sage_const_978 
 _st_.commandline(_sage_const_28 , r"""
sage: Z3 = GF(3) # prime field
sage: Z3t.<t> = Z3[] # polynomials over Z3
sage: P = Z3t(t^2+1)
sage: P.is_irreducible()
sage: F3_2.<t> = GF(3^2, name='t', modulus=P)
sage: F3_2
sage: F3_2(t+2)*F3_2(2*t+2) == F3_2(2)
sage: F3_2(2*t+2)^(-1) # multiplicative inverse
sage: # verify our solution to (t+1)(x^2 + (2t+2)) = 2
sage: F3_2(t+1)*(F3_2(t)**2 + F3_2(2*t+2)) == F3_2(2)
sage: F3_2(t+1)*(F3_2(2*t)**2 + F3_2(2*t+2)) == F3_2(2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_990 )
_st_.current_tex_line = _sage_const_39 
_st_.blockbegin()
try:
 E1 = EllipticCurve([-_sage_const_2 ,_sage_const_1 ])
 C1 = E1.plot()
 F = GF(_sage_const_9973 )
 E2 = EllipticCurve(F, [-_sage_const_2 ,_sage_const_1 ])
 C2 = E2.plot()
except:
 _st_.goboom(_sage_const_45 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_47 
 _st_.plot(_sage_const_4 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_47 )
try:
 _st_.current_tex_line = _sage_const_51 
 _st_.plot(_sage_const_5 , format='notprovided', _p_=C2)
except:
 _st_.goboom(_sage_const_51 )
try:
 _st_.current_tex_line = _sage_const_61 
 _st_.commandline(_sage_const_29 , r"""
sage: F5 = GF(5) # define the base field
sage: a = F5(2) # parameter a
sage: b = F5(4) # parameter b
sage: # check non-sigularity
sage: F5(6)*(F5(4)*a^3+F5(27)*b^2) != F5(0)
sage: # short Weierstrass curve
sage: E = EllipticCurve(F5,[a,b]) # y^2 == x^3 + ax +b
sage: P = E(0,2) # 2^2 == 0^3 + 2*0 + 4
sage: P.xy() # affine coordinates
sage: INF = E(0) # point at infinity
sage: try:  # point at infinity has no affine coordinates
....:     INF.xy()
....: except ZeroDivisionError:
....:     pass
sage: P = E.plot() # create a plotted version
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_77 )
_st_.current_tex_line = _sage_const_90 
_st_.blockbegin()
try:
 F5 = GF(_sage_const_5 )
 E1 = EllipticCurve(F5, [_sage_const_1 ,_sage_const_1 ])
 C1 = E1.plot()
except:
 _st_.goboom(_sage_const_94 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_96 
 _st_.plot(_sage_const_6 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_96 )
_st_.current_tex_line = _sage_const_113 
_st_.blockbegin()
try:
 F13 = GF(_sage_const_13 )
 TJJ_13 = EllipticCurve(F13, [_sage_const_8 ,_sage_const_8 ])
 CTJJ_13 = TJJ_13.plot()
except:
 _st_.goboom(_sage_const_117 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_119 
 _st_.plot(_sage_const_7 , format='notprovided', _p_=CTJJ_13)
except:
 _st_.goboom(_sage_const_119 )
try:
 _st_.current_tex_line = _sage_const_143 
 _st_.commandline(_sage_const_30 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: # Hexadecimal representation
sage: p.str(16)
sage: p.is_prime()
sage: p.nbits()
sage: Fp = GF(p)
sage: Secp256k1 = EllipticCurve(Fp,[0,7])
sage: r = Secp256k1.order() # number of elements
sage: r.str(16)
sage: r.is_prime()
sage: r.nbits()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_155 )
try:
 _st_.current_tex_line = _sage_const_184 
 _st_.commandline(_sage_const_31 , r"""
sage: P = Secp256k1.random_point().xy()
sage: P
sage: # uncompressed affine point size
sage: ZZ(P[0]).nbits()+ZZ(P[1]).nbits()
sage: # compute the compression
sage: if P[1] > Fp(-1)/Fp(2):
....:     PARITY = 1
....: else:
....:     PARITY = 0
sage: PCOMPRESSED = [P[0],PARITY]
sage: PCOMPRESSED
sage: # compressed affine point size
sage: ZZ(PCOMPRESSED[0]).nbits()+ZZ(PCOMPRESSED[1]).nbits()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_198 )
try:
 _st_.current_tex_line = _sage_const_297 
 _st_.commandline(_sage_const_32 , r"""
sage: F5 = GF(5)
sage: E1 = EllipticCurve(F5,[1,1])
sage: INF = E1(0) # point at infinity
sage: P1 = E1(0,1)
sage: P2 = E1(4,2)
sage: P3 = E1(0,4)
sage: R1 = E1(2,1)
sage: R2 = E1(3,4)
sage: R1 == P1+P2
sage: INF == P1+P3
sage: R2 == P2+P2
sage: R2 == 2*P2
sage: P3 == P3 + INF
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_311 )
try:
 _st_.current_tex_line = _sage_const_319 
 _st_.commandline(_sage_const_33 , r"""
sage: F13 = GF(13)
sage: MJJ = EllipticCurve(F13,[8,8])
sage: P = MJJ(4,0)
sage: INF = MJJ(0) # Point at infinity
sage: INF == P+P
sage: INF == 2*P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_326 )
try:
 _st_.current_tex_line = _sage_const_330 
 _st_.commandline(_sage_const_34 , r"""
sage: P = Secp256k1.random_point()
sage: Q = Secp256k1.random_point()
sage: INF = Secp256k1(0)
sage: R1 = -P
sage: R2 = P + Q
sage: R3 = Secp256k1.order()*P
sage: P.xy()
sage: Q.xy()
sage: (ZZ(R1[0]).str(16), ZZ(R1[1]).str(16))
sage: R2.xy()
sage: R3 == INF
sage: P[1]+R1[1] == Fp(0) # -(x,y) = (x,-y)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_343 )
try:
 _st_.current_tex_line = _sage_const_440 
 _st_.commandline(_sage_const_35 , r"""
sage: F13 = GF(13)
sage: TJJ = EllipticCurve(F13,[8,8])
sage: P = TJJ(5,11)
sage: INF = TJJ(0)
sage: 10*P == INF
sage: Q = TJJ(9,4)
sage: R = TJJ(4,0)
sage: 10*Q == R
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_449 )
try:
 _st_.current_tex_line = _sage_const_709 
 _st_.commandline(_sage_const_36 , r"""
sage: F13 = GF(13)
sage: L_MTJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(7)*y^2 == x^3 + F13(6)*x^2 +x:
....:             L_MTJJ.append((x,y))
sage: MTJJ = Set(L_MTJJ)
sage: # does not compute the point at infinity
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_718 )
try:
 _st_.current_tex_line = _sage_const_748 
 _st_.commandline(_sage_const_37 , r"""
sage: # Compute PHI of Montgomery form:
sage: L_PHI_MTJJ = []
sage: for (x,y) in L_MTJJ: # LMJJ as defined previously
....:     v = (F13(3)*x + F13(6))/(F13(3)*F13(7))
....:     w = y/F13(7)
....:     L_PHI_MTJJ.append((v,w))
sage: PHI_MTJJ = Set(L_PHI_MTJJ)
sage: # Computation Weierstrass form
sage: C_WTJJ = EllipticCurve(F13,[8,8])
sage: L_WTJJ = [P.xy() for P in C_WTJJ.points() if P.order() > 1]
sage: WTJJ = Set(L_WTJJ)
sage: # check PHI(Montgomery) == Weierstrass
sage: WTJJ == PHI_MTJJ
sage: # check the inverse map PHI^(-1)
sage: L_PHIINV_WTJJ = []
sage: for (v,w) in L_WTJJ:
....:     x = F13(7)*(v-F13(4))
....:     y = F13(7)*w
....:     L_PHIINV_WTJJ.append((x,y))
sage: PHIINV_WTJJ = Set(L_PHIINV_WTJJ)
sage: MTJJ == PHIINV_WTJJ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_770 )
try:
 _st_.current_tex_line = _sage_const_871 
 _st_.commandline(_sage_const_38 , r"""
sage: F13 = GF(13)
sage: L_ETJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(3)*x^2 + y^2 == 1+ F13(8)*x^2*y^2:
....:             L_ETJJ.append((x,y))
sage: ETJJ = Set(L_ETJJ)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_879 )
try:
 _st_.current_tex_line = _sage_const_981 
 _st_.commandline(_sage_const_39 , r"""
sage: p = 13
sage: # large prime factor
sage: n = 5
sage: for k in range(1,5): # Fermat's little theorem
....:     if (p^k-1)%n == 0:
....:         break
sage: k
sage: # small prime factor
sage: n = 2
sage: for k in range(1,2): # Fermat's little theorem
....:     if (p^k-1)%n == 0:
....:         break
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_995 )
try:
 _st_.current_tex_line = _sage_const_1001 
 _st_.commandline(_sage_const_40 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: n = 115792089237316195423570985008687907852837564279074904382605163141518161494337
sage: for k in range(1,1000):
....:     if (p^k-1)%n == 0:
....:         break
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1008 )
try:
 _st_.current_tex_line = _sage_const_1026 
 _st_.commandline(_sage_const_41 , r"""
sage: F5= GF(5)
sage: F5t.<t> = F5[]
sage: P = F5t(t^2+2)
sage: P.is_irreducible()
sage: F5_2.<t> = GF(5^2, name='t', modulus=P)
sage: E1F5_2 = EllipticCurve(F5_2,[1,1])
sage: E1F5_2.order()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1034 )
try:
 _st_.current_tex_line = _sage_const_1059 
 _st_.commandline(_sage_const_42 , r"""
sage: INF = E1F5_2(0) # Point at infinity
sage: L_E1_3 = []
sage: for p in E1F5_2:
....:     if 3*p == INF:
....:         L_E1_3.append(p)
sage: E1_3 = Set(L_E1_3) # Full 3-torsion set
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1066 )
try:
 _st_.current_tex_line = _sage_const_1078 
 _st_.commandline(_sage_const_43 , r"""
sage: # define the extension field
sage: F13= GF(13) # prime field
sage: F13t.<t> = F13[] # polynomials over t
sage: P = F13t(t^4+2) # irreducible polynomial of degree 4
sage: P.is_irreducible()
sage: F13_4.<t> = GF(13^4, name='t', modulus=P) # F_{13^4}
sage: TJJF13_4 = EllipticCurve(F13_4,[8,8]) # tiny-jubjub extension
sage: # compute the full 5-torsion
sage: L_TJJF13_4_5 = []
sage: INF = TJJF13_4(0)
sage: for P in INF.division_points(5): # [5]P == INF
....:     L_TJJF13_4_5.append(P)
sage: len(L_TJJF13_4_5)
sage: TJJF13_4_5 = Set(L_TJJF13_4_5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1093 )
try:
 _st_.current_tex_line = _sage_const_1095 
 _st_.commandline(_sage_const_44 , r"""
sage: # define the extension field
sage: P = F13t(t^3+2) # irreducible polynomial of degree 3
sage: P.is_irreducible()
sage: F13_3.<t> = GF(13^3, name='t', modulus=P) # F_{13^3}
sage: TJJF13_3 = EllipticCurve(F13_3,[8,8]) # tiny-jubjub extension
sage: # compute the 5-torsion
sage: L_TJJF13_3_5 = []
sage: INF = TJJF13_3(0)
sage: for P in INF.division_points(5): # [5]P == INF
....:     L_TJJF13_3_5.append(P)
sage: len(L_TJJF13_3_5)
sage: TJJF13_3_5 = Set(L_TJJF13_3_5) # full $5$-torsion
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1108 )
try:
 _st_.current_tex_line = _sage_const_1162 
 _st_.commandline(_sage_const_45 , r"""
sage: L_G1 = []
sage: for P in E1_3:
....:     PiP = E1F5_2([a.frobenius() for a in P]) # pi(P)
....:     if P == PiP:
....:         L_G1.append(P)
sage: G1 = Set(L_G1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1169 )
try:
 _st_.current_tex_line = _sage_const_1171 
 _st_.commandline(_sage_const_46 , r"""
sage: L_G2 = []
sage: for P in E1_3:
....:     PiP = E1F5_2([a.frobenius() for a in P]) # pi(P)
....:     pP = 5*P # [5]P
....:     if pP == PiP:
....:         L_G2.append(P)
sage: G2 = Set(L_G2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1179 )
try:
 _st_.current_tex_line = _sage_const_1186 
 _st_.commandline(_sage_const_47 , r"""
sage: L_TJJ_G1 = []
sage: for P in TJJF13_4_5:
....:     PiP = TJJF13_4([a.frobenius() for a in P]) # pi(P)
....:     if P == PiP:
....:         L_TJJ_G1.append(P)
sage: TJJ_G1 = Set(L_TJJ_G1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1193 )
try:
 _st_.current_tex_line = _sage_const_1195 
 _st_.commandline(_sage_const_48 , r"""
sage: L_TJJ_G1 = []
sage: for P in TJJF13_4_5:
....:     PiP = TJJF13_4([a.frobenius() for a in P]) # pi(P)
....:     pP = 13*P # [5]P
....:     if pP == PiP:
....:         L_TJJ_G1.append(P)
sage: TJJ_G1 = Set(L_TJJ_G1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1203 )
try:
 _st_.current_tex_line = _sage_const_1377 
 _st_.commandline(_sage_const_49 , r"""
sage: import hashlib
sage: def try_hash(s,c):
....:     s_1 = s+c
....:     hasher = hashlib.sha256(s_1.encode('utf-8'))
....:     digest = hasher.hexdigest()
....:     d = Integer(digest,base=16)
....:     sign = d.str(2)[-5:-4]
....:     d = d.str(2)[-4:]
....:     z = Integer(d,base=2)
....:     return (z,sign)
sage: try_hash('10011001111010110100000111','0000')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1389 )
try:
 _st_.current_tex_line = _sage_const_1392 
 _st_.commandline(_sage_const_50 , r"""
sage: try_hash('10011001111010110100000111','0001')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1394 )
try:
 _st_.current_tex_line = _sage_const_1397 
 _st_.commandline(_sage_const_51 , r"""
sage: try_hash('10011001111010110100000111','0010')
sage: try_hash('10011001111010110100000111','0011')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1400 )
try:
 _st_.current_tex_line = _sage_const_1412 
 _st_.commandline(_sage_const_52 , r"""
sage: try_hash('10011001111010110100000111','0100')
sage: try_hash('10011001111010110100000111','0101')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1415 )
try:
 _st_.current_tex_line = _sage_const_1479 
 _st_.commandline(_sage_const_53 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
sage: t = p + 1 -r
sage: t.nbits()
sage: abs(RR(t)) <= 2*sqrt(RR(p))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1485 )
try:
 _st_.current_tex_line = _sage_const_1518 
 _st_.commandline(_sage_const_54 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: F = GF(p)
sage: j = F(1728)*((F(4)*F(0)^3)/(F(4)*F(0)^3+F(27)*F(7)^2))
sage: j == F(0)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1523 )
try:
 _st_.current_tex_line = _sage_const_1576 
 _st_.commandline(_sage_const_55 , r"""
sage: z = ComplexField(100)(0,1)
sage: z # (0+1i)
sage: elliptic_j(z)
sage: # j-function only defined for positive imaginary arguments
sage: z = ComplexField(100)(1,-1)
sage: try:
....:     elliptic_j(z)
....: except PariError:
....:     pass
sage: # root at (-1+i sqrt(3))/2
sage: z = ComplexField(100)(-1,sqrt(3))/2
sage: elliptic_j(z)
sage: elliptic_j(z).imag().round()
sage: elliptic_j(z).real().round()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1591 )
try:
 _st_.current_tex_line = _sage_const_1769 
 _st_.commandline(_sage_const_56 , r"""
sage: D = -3
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: r = 115792089237316195423570985008687907852837564279074904382605163141518161494337
sage: t = p+1-r
sage: v_sqr = (4*p - t^2)/abs(D)
sage: v_sqr.is_integer()
sage: v = sqrt(v_sqr)
sage: v.is_integer()
sage: 4*p == t^2 + abs(D)*v^2
sage: v
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1780 )
try:
 _st_.current_tex_line = _sage_const_1786 
 _st_.commandline(_sage_const_57 , r"""
sage: F = GF(p)
sage: for c2 in F:
....:     try: # quadratic residue
....:         _ = c2.nth_root(2)
....:     except ValueError: # quadratic non-residue
....:         break
sage: c2
sage: for c3 in F:
....:     try:
....:         _ = c3.nth_root(3)
....:     except ValueError:
....:         break
sage: c3
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1800 )
try:
 _st_.current_tex_line = _sage_const_1803 
 _st_.commandline(_sage_const_58 , r"""
sage: C1 = EllipticCurve(F,[0,1])
sage: C1.order() == r
sage: C2 = EllipticCurve(F,[0,c2^3])
sage: C2.order() == r
sage: C3 = EllipticCurve(F,[0,c3^2])
sage: C3.order() == r
sage: C4 = EllipticCurve(F,[0,c3^2*c2^3])
sage: C4.order() == r
sage: C5 = EllipticCurve(F,[0,c3^(-2)])
sage: C5.order() == r
sage: C6 = EllipticCurve(F,[0,c3^(-2)*c2^3])
sage: C6.order() == r
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1816 )
try:
 _st_.current_tex_line = _sage_const_1828 
 _st_.commandline(_sage_const_59 , r"""
sage: b1=86844066927987146567678238756515930889952488499230423029593188005931626003754
sage: for b2 in F:
....:     try:
....:         d = (b2/b1).nth_root(3)
....:         try:
....:             _ = d.nth_root(2)
....:             if d != 0:
....:                 break
....:         except ValueError:
....:             pass
....:     except ValueError:
....:         pass
sage: b2
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1842 )
try:
 _st_.current_tex_line = _sage_const_1893 
 _st_.commandline(_sage_const_60 , r"""
sage: for k in range(1,42): # Fermat's little theorem
....:     if (43^k-1)%13 == 0:
....:         break
sage: k
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1898 )
try:
 _st_.current_tex_line = _sage_const_1915 
 _st_.commandline(_sage_const_61 , r"""
sage: F43 = GF(43)
sage: c2 = F43(5)
....: try: # quadratic residue
....:     c2.nth_root(2)
....: except ValueError: # quadratic non-residue
....:     c2
sage: c3 =F43(36)
....: try:
....:     c3.nth_root(3)
....: except ValueError:
....:     c3
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1927 )
try:
 _st_.current_tex_line = _sage_const_1931 
 _st_.commandline(_sage_const_62 , r"""
sage: BLS61 = EllipticCurve(F43,[0,1])
sage: BLS61.order() == 39
sage: BLS62 = EllipticCurve(F43,[0,c2^3])
sage: BLS62.order() == 39
sage: BLS63 = EllipticCurve(F43,[0,c3^2])
sage: BLS63.order() == 39
sage: BLS64 = EllipticCurve(F43,[0,c3^2*c2^3])
sage: BLS64.order() == 39
sage: BLS65 = EllipticCurve(F43,[0,c3^(-2)])
sage: BLS65.order() == 39
sage: BLS66 = EllipticCurve(F43,[0,c3^(-2)*c2^3])
sage: BLS66.order() == 39
sage: BLS6 = BLS63 # our BLS6 curve in the book
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1945 )
_st_.current_tex_line = _sage_const_1954 
_st_.blockbegin()
try:
 BLS63p = BLS63.plot()
except:
 _st_.goboom(_sage_const_1956 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_1958 
 _st_.plot(_sage_const_8 , format='notprovided', _p_=BLS63p)
except:
 _st_.goboom(_sage_const_1958 )
try:
 _st_.current_tex_line = _sage_const_1981 
 _st_.commandline(_sage_const_63 , r"""
sage: P = BLS6(9,2)
sage: Q = 3*P
sage: Q.xy()
sage: BLS6_13 = []
sage: for x in range(0,13): # cyclic of order 13
....:     P = x*Q
....:     BLS6_13.append(P)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1989 )
try:
 _st_.current_tex_line = _sage_const_2066 
 _st_.commandline(_sage_const_64 , r"""
sage: F43 = GF(43)
sage: F43t.<t> = F43[]
sage: p = F43t(t^6+6)
sage: p.is_irreducible()
sage: F43_6.<v> = GF(43^6, name='v', modulus=p)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2072 )
try:
 _st_.current_tex_line = _sage_const_2080 
 _st_.commandline(_sage_const_65 , r"""
sage: BLS6 = EllipticCurve (F43_6,[0 ,6]) # curve extension
sage: INF = BLS6(0) # point at infinity
sage: for P in INF.division_points(13): # full 13-torsion
....: # PI(P) == [q]P
....:     if P.order() == 13: # exclude point at infinity
....:         PiP = BLS6([a.frobenius() for a in P])
....:         qP = 43*P
....:         if PiP == qP:
....:             break
sage: P.xy()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2091 )
try:
 _st_.current_tex_line = _sage_const_2099 
 _st_.commandline(_sage_const_66 , r"""
sage: Q = BLS6(7*v^2,16*v^3)
sage: BLS6_13_2 = []
sage: for x in range(0,13):
....:     P = x*Q
....:     BLS6_13_2.append(P)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2105 )
try:
 _st_.current_tex_line = _sage_const_2145 
 _st_.commandline(_sage_const_67 , r"""
sage: g1 = BLS6([13,15])
sage: g2 = BLS6([7*v^2, 16*v^3])
sage: g1.weil_pairing(g2,13)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_2149 )
try:
 _st_.current_tex_line = _sage_const_1269 
 _st_.commandline(_sage_const_68 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t((t-5)*(t-7))
sage: A2 = F13t.lagrange_polynomial([(5,1),(7,0)])
sage: A5 = F13t.lagrange_polynomial([(5,0),(7,1)])
sage: T == F13t(t^2 + t + 9)
sage: A2 == F13t(6*t + 10)
sage: A5 == F13t(7*t + 4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1278 )
try:
 _st_.current_tex_line = _sage_const_1334 
 _st_.commandline(_sage_const_69 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t(t^2 + t + 9)
sage: P = F13t((2*(6*t+10)+6*(7*t+4))*(3*(6*t+10)+4*(7*t +4))-(11*(7*t+4)+6*(6*t+10)))
sage: P == T
sage: P % T # remainder
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1341 )
try:
 _st_.current_tex_line = _sage_const_1355 
 _st_.commandline(_sage_const_70 , r"""
sage: F13 = GF(13)
sage: F13t.<t> = F13[]
sage: T = F13t(t^2 + t + 9)
sage: P = F13t((2*(6*t+10)+8*(7*t+4))*(3*(6*t+10)+4*(7*t+4))-(8*(6*t+10)+11*(7*t+4)))
sage: P == F13t(8*t^2 + 6)
sage: P % T # remainder
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1362 )
_st_.endofdoc()

