## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file main-moonmath.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_57 = Integer(57); _sage_const_0 = Integer(0); _sage_const_68 = Integer(68); _sage_const_86 = Integer(86); _sage_const_1 = Integer(1); _sage_const_89 = Integer(89); _sage_const_158 = Integer(158); _sage_const_2 = Integer(2); _sage_const_163 = Integer(163); _sage_const_175 = Integer(175); _sage_const_3 = Integer(3); _sage_const_179 = Integer(179); _sage_const_193 = Integer(193); _sage_const_4 = Integer(4); _sage_const_196 = Integer(196); _sage_const_274 = Integer(274); _sage_const_5 = Integer(5); _sage_const_276 = Integer(276); _sage_const_368 = Integer(368); _sage_const_6 = Integer(6); _sage_const_375 = Integer(375); _sage_const_411 = Integer(411); _sage_const_7 = Integer(7); _sage_const_414 = Integer(414); _sage_const_497 = Integer(497); _sage_const_8 = Integer(8); _sage_const_499 = Integer(499); _sage_const_578 = Integer(578); _sage_const_9 = Integer(9); _sage_const_582 = Integer(582); _sage_const_651 = Integer(651); _sage_const_10 = Integer(10); _sage_const_653 = Integer(653); _sage_const_699 = Integer(699); _sage_const_11 = Integer(11); _sage_const_704 = Integer(704); _sage_const_779 = Integer(779); _sage_const_12 = Integer(12); _sage_const_792 = Integer(792); _sage_const_814 = Integer(814); _sage_const_13 = Integer(13); _sage_const_823 = Integer(823); _sage_const_843 = Integer(843); _sage_const_14 = Integer(14); _sage_const_849 = Integer(849); _sage_const_860 = Integer(860); _sage_const_15 = Integer(15); _sage_const_865 = Integer(865); _sage_const_901 = Integer(901); _sage_const_16 = Integer(16); _sage_const_907 = Integer(907); _sage_const_921 = Integer(921); _sage_const_17 = Integer(17); _sage_const_927 = Integer(927); _sage_const_982 = Integer(982); _sage_const_18 = Integer(18); _sage_const_989 = Integer(989); _sage_const_1020 = Integer(1020); _sage_const_19 = Integer(19); _sage_const_1024 = Integer(1024); _sage_const_1044 = Integer(1044); _sage_const_20 = Integer(20); _sage_const_1049 = Integer(1049); _sage_const_1108 = Integer(1108); _sage_const_21 = Integer(21); _sage_const_1112 = Integer(1112); _sage_const_1137 = Integer(1137); _sage_const_22 = Integer(22); _sage_const_1141 = Integer(1141); _sage_const_23 = Integer(23); _sage_const_512 = Integer(512); _sage_const_587 = Integer(587); _sage_const_24 = Integer(24); _sage_const_599 = Integer(599); _sage_const_649 = Integer(649); _sage_const_25 = Integer(25); _sage_const_714 = Integer(714); _sage_const_26 = Integer(26); _sage_const_716 = Integer(716); _sage_const_721 = Integer(721); _sage_const_27 = Integer(27); _sage_const_723 = Integer(723); _sage_const_28 = Integer(28); _sage_const_803 = Integer(803); _sage_const_805 = Integer(805); _sage_const_500 = Integer(500); _sage_const_807 = Integer(807); _sage_const_809 = Integer(809); _sage_const_812 = Integer(812); _sage_const_100000 = Integer(100000); _sage_const_10000 = Integer(10000); _sage_const_818 = Integer(818); _sage_const_820 = Integer(820); _sage_const_31 = Integer(31); _sage_const_829 = Integer(829); _sage_const_831 = Integer(831); _sage_const_29 = Integer(29); _sage_const_859 = Integer(859); _sage_const_862 = Integer(862); _sage_const_883 = Integer(883); _sage_const_885 = Integer(885); _sage_const_931 = Integer(931); _sage_const_30 = Integer(30); _sage_const_933 = Integer(933); _sage_const_951 = Integer(951); _sage_const_956 = Integer(956); _sage_const_1238 = Integer(1238); _sage_const_32 = Integer(32); _sage_const_1250 = Integer(1250)## This file (main-moonmath.sagetex.sage) was *autogenerated* from main-moonmath.tex with sagetex.sty version 2020/08/12 v3.5.
import sagetex
_st_ = sagetex.SageTeXProcessor('main-moonmath', version='2020/08/12 v3.5', version_check=True)
try:
 _st_.current_tex_line = _sage_const_57 
 _st_.commandline(_sage_const_0 , r"""
sage: ZZ #  Sage notation for the set of integers
sage: NN # Sage notation for the set of natural numbers
sage: QQ # Sage notation for the set of rational numbers
sage: ZZ(5) # Get an element from the set of integers
sage: ZZ(5) + ZZ(3)
sage: ZZ(5) * NN(3)
sage: ZZ.random_element(10**50)
sage: ZZ(27713).str(2) # Binary string representation
sage: NN(27713).str(2) # Binary string representation
sage: ZZ(27713).str(16) # Hexadecimal string representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_68 )
try:
 _st_.current_tex_line = _sage_const_86 
 _st_.commandline(_sage_const_1 , r"""
sage: n = NN(504)
sage: factor(n)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_89 )
try:
 _st_.current_tex_line = _sage_const_158 
 _st_.commandline(_sage_const_2 , r"""
sage: ZZ(-17) // ZZ(4) # Integer quotient
sage: ZZ(-17) % ZZ(4) # remainder
sage: ZZ(4).divides(ZZ(-17)) # self divides other
sage: ZZ(4).divides(ZZ(12))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_163 )
try:
 _st_.current_tex_line = _sage_const_175 
 _st_.commandline(_sage_const_3 , r"""
sage: ZZ(-17) // ZZ(-4) # Integer quotient
sage: ZZ(-17) % ZZ(-4) # remainder
sage: ZZ(-17).quo_rem(ZZ(-4)) # not Euclidean Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_179 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.commandline(_sage_const_4 , r"""
sage: ZZ(143785).quo_rem(ZZ(17))
sage: ZZ(143785) == ZZ(8457)*ZZ(17) + ZZ(16) # check
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_196 )
try:
 _st_.current_tex_line = _sage_const_274 
 _st_.commandline(_sage_const_5 , r"""
sage: ZZ(12).xgcd(ZZ(5)) # (gcd(a,b),s,t)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_276 )
try:
 _st_.current_tex_line = _sage_const_368 
 _st_.commandline(_sage_const_6 , r"""
sage: ZZ(137).gcd(ZZ(64))
sage: ZZ(64)^ ZZ(137) % ZZ(137) == ZZ(64) % ZZ(137)
sage: ZZ(64)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
sage: ZZ(1918).gcd(ZZ(137))
sage: ZZ(1918)^ ZZ(137) % ZZ(137) == ZZ(1918) % ZZ(137)
sage: ZZ(1918)^ ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_375 )
try:
 _st_.current_tex_line = _sage_const_411 
 _st_.commandline(_sage_const_7 , r"""
sage: (ZZ(7)* (ZZ(2)*ZZ(4) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(4) - ZZ(102))  % ZZ(6)
sage: (ZZ(7)* (ZZ(2)*ZZ(76) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(76) - ZZ(102))  % ZZ(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_414 )
try:
 _st_.current_tex_line = _sage_const_497 
 _st_.commandline(_sage_const_8 , r"""
sage: CRT_list([4,1,3,0], [7,3,5,11])
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_499 )
try:
 _st_.current_tex_line = _sage_const_578 
 _st_.commandline(_sage_const_9 , r"""
sage: Z6 = Integers(6)
sage: Z6(2) + Z6(5)
sage: Z6(7)*(Z6(2)*Z6(4)+Z6(21))+Z6(11) == Z6(4) - Z6(102)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_582 )
try:
 _st_.current_tex_line = _sage_const_651 
 _st_.commandline(_sage_const_10 , r"""
sage: ZZ(6).xgcd(ZZ(5))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_653 )
try:
 _st_.current_tex_line = _sage_const_699 
 _st_.commandline(_sage_const_11 , r"""
sage: Z5 = Integers(5)
sage: Z5(3)**(5-2)
sage: Z5(3)**(-1)
sage: Z5(3)**(5-2) == Z5(3)**(-1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_704 )
try:
 _st_.current_tex_line = _sage_const_779 
 _st_.commandline(_sage_const_12 , r"""
sage: Zx = ZZ['x'] # integer polynomials with variable x
sage: Zt.<t> = ZZ[] # integer polynomials with variable t
sage: Zx
sage: Zt
sage: p1 = Zx([17,-4,2])
sage: p1
sage: p1.degree()
sage: p1.leading_coefficient()
sage: p2 = Zt(t^23)
sage: p2
sage: p6 = Zx([0])
sage: p6.degree()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_792 )
try:
 _st_.current_tex_line = _sage_const_814 
 _st_.commandline(_sage_const_13 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: Z6x
sage: p1 = Z6x([5,-4,2])
sage: p1
sage: p1 = Z6x([17,-4,2])
sage: p1
sage: Z6x(x-2)*Z6x(x+3)*Z6x(x-5) == Z6x(x^3 + 2*x^2 + x)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_823 )
try:
 _st_.current_tex_line = _sage_const_843 
 _st_.commandline(_sage_const_14 , r"""
sage: Zx = ZZ['x']
sage: p1 = Zx([17,-4,2])
sage: p7 = Zx(x-2)*Zx(x+3)*Zx(x-5)
sage: p1(ZZ(2))
sage: p7(ZZ(-6)) == ZZ(-264)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_849 )
try:
 _st_.current_tex_line = _sage_const_860 
 _st_.commandline(_sage_const_15 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: p1 = Z6x([5,-4,2])
sage: p1(Z6(2)) == Z6(5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_865 )
try:
 _st_.current_tex_line = _sage_const_901 
 _st_.commandline(_sage_const_16 , r"""
sage: Zx = ZZ['x']
sage: P = Zx([2,-4,5])
sage: Q = Zx([5,0,-2,1])
sage: P+Q == Zx(x^3 +3*x^2 -4*x +7)
sage: P*Q == Zx(5*x^5 -14*x^4 +10*x^3+21*x^2-20*x +10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_907 )
try:
 _st_.current_tex_line = _sage_const_921 
 _st_.commandline(_sage_const_17 , r"""
sage: Z6x = Integers(6)['x']
sage: P = Z6x([2,-4,5])
sage: Q = Z6x([5,0,-2,1])
sage: P+Q == Z6x(x^3 +3*x^2 +2*x +1)
sage: P*Q == Z6x(5*x^5 +4*x^4 +4*x^3+3*x^2+4*x +4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_927 )
try:
 _st_.current_tex_line = _sage_const_982 
 _st_.commandline(_sage_const_18 , r"""
sage: Zx = ZZ['x']
sage: A = Zx([-9,0,0,2,0,1])
sage: B = Zx([-1,4,1])
sage: Q = Zx([-80,19,-4,1])
sage: P = Zx([-89,339])
sage: A == Q*B + P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_989 )
try:
 _st_.current_tex_line = _sage_const_1020 
 _st_.commandline(_sage_const_19 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^2-3)
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1024 )
try:
 _st_.current_tex_line = _sage_const_1044 
 _st_.commandline(_sage_const_20 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^7 + 3*x^6 + 3*x^5 + x^4 - x^3 - 3*x^2 - 3*x - 1)
sage: p.roots()
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1049 )
try:
 _st_.current_tex_line = _sage_const_1108 
 _st_.commandline(_sage_const_21 , r"""
sage: Qx = QQ['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: Qx.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1112 )
try:
 _st_.current_tex_line = _sage_const_1137 
 _st_.commandline(_sage_const_22 , r"""
sage: F5 = GF(5)
sage: F5x = F5['x']
sage: S=[(0,4),(-2,1),(2,3)]
sage: F5x.lagrange_polynomial(S)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1141 )
try:
 _st_.current_tex_line = _sage_const_499 
 _st_.commandline(_sage_const_23 , r"""
sage: import hashlib
sage: test = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
sage: empty_string = ""
sage: binary_string = empty_string.encode()
sage: hasher = hashlib.sha256(binary_string)
sage: result = hasher.hexdigest()
sage: type(result) # Sage represents digests as strings
sage: d = ZZ('0x'+ result) # conversion to an integer
sage: d.str(16) == test # hash is equal to test vector
sage: d.str(16) # hexadecimal representation
sage: d.str(2) # binary representation
sage: d.str(10) # decimal representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_512 )
try:
 _st_.current_tex_line = _sage_const_587 
 _st_.commandline(_sage_const_24 , r"""
sage: import hashlib
sage: def SHA256_H(x):
....:     Z5 = Integers(5) # define the group type
....:     hasher = hashlib.sha256(x) # compute SHA256
....:     digest = hasher.hexdigest()
....:     z = ZZ(digest, 16) # cast into integer
....:     z_bin = z.digits(base=2, padto=256) # cast to 256bits
....:     return Z5(2)^z_bin[0] * Z5(3)^z_bin[1]
sage: SHA256_H(b"") # evaluate on empty string
sage: SHA256_H(b"SHA") # possible images are {1,2,3}
sage: SHA256_H(b"Math")
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_599 )
try:
 _st_.current_tex_line = _sage_const_649 
 _st_.commandline(_sage_const_25 , r"""
sage: ZZ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_651 )
try:
 _st_.current_tex_line = _sage_const_714 
 _st_.commandline(_sage_const_26 , r"""
sage: ZZ['x']
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_716 )
try:
 _st_.current_tex_line = _sage_const_721 
 _st_.commandline(_sage_const_27 , r"""
sage: Integers(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_723 )
try:
 _st_.current_tex_line = _sage_const_792 
 _st_.commandline(_sage_const_28 , r"""
sage: import hashlib
sage: def Hash5(x):
....:     Z16 = Integers(16)
....:     hasher = hashlib.sha256(x) # compute SHA56
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16) # cast to integer
....:     d = d.str(2)[-4:] # keep 5 least significant bits
....:     d = ZZ(d, base=2) # cast to integer
....:     return Z16(d) # cast to Z16
sage: Hash5(b'')
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_803 )
_st_.current_tex_line = _sage_const_805 
_st_.blockbegin()
try:
 H1 = list_plot([Hash5(ZZ(k).str(_sage_const_2 ).encode('utf-8')) for k in range(_sage_const_500 )])
except:
 _st_.goboom(_sage_const_807 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_809 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=H1)
except:
 _st_.goboom(_sage_const_809 )
_st_.current_tex_line = _sage_const_812 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_16 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H2 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_818 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_820 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=H2)
except:
 _st_.goboom(_sage_const_820 )
_st_.current_tex_line = _sage_const_823 
_st_.blockbegin()
try:
 arr = []
 arr = [_sage_const_0  for i in range(_sage_const_31 )]
 for i in range(_sage_const_100000 ):
     arr[Hash5(ZZ(i).str(_sage_const_2 ).encode('utf-8'))] +=_sage_const_1 
 H3 = list_plot(arr, ymin=_sage_const_0 ,ymax=_sage_const_10000 )
except:
 _st_.goboom(_sage_const_829 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_831 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=H3)
except:
 _st_.goboom(_sage_const_831 )
try:
 _st_.current_tex_line = _sage_const_849 
 _st_.commandline(_sage_const_29 , r"""
sage: import hashlib
sage: Z23 = Integers(23)
sage: def Hash_mod23(x, k2):
....:     hasher = hashlib.sha256(x.encode('utf-8')) # Compute SHA256
....:     digest = hasher.hexdigest()
....:     d = ZZ(digest, base=16) # cast to integer
....:     d = d.str(2)[-k2:] # keep k2+1 LSB
....:     d = ZZ(d, base=2) # cast to integer
....:     return Z23(d) # cast to Z23
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_859 )
_st_.current_tex_line = _sage_const_862 
_st_.blockbegin()
try:
 arr1 = []
 arr1 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr1[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_5 )] +=_sage_const_1 
 H3 = list_plot(arr1, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='red', legend_label='k2=5')
 arr2 = []
 arr2 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr2[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_7 )] +=_sage_const_1 
 H4 = list_plot(arr2, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='blue', legend_label='k2=7')
 arr3 = []
 arr3 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr3[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_9 )] +=_sage_const_1 
 H5 = list_plot(arr3, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='yellow', legend_label='k2=9')
 arr4 = []
 arr4 = [_sage_const_0  for i in range(_sage_const_23 )]
 for i in range(_sage_const_100000 ):
     arr4[Hash_mod23(ZZ(i).str(_sage_const_2 ),_sage_const_16 )] +=_sage_const_1 
 H6 = list_plot(arr4, ymin=_sage_const_0 ,ymax=_sage_const_10000 ,color='black', legend_label='k2=16')
except:
 _st_.goboom(_sage_const_883 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_885 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=H3+H4+H5+H6)
except:
 _st_.goboom(_sage_const_885 )
try:
 _st_.current_tex_line = _sage_const_931 
 _st_.commandline(_sage_const_30 , r"""
sage: QQ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_933 )
try:
 _st_.current_tex_line = _sage_const_951 
 _st_.commandline(_sage_const_31 , r"""
sage: F2 = GF(2)
sage: F2(1) # Get an element from GF(2)
sage: F2(1) + F2(1) # Addition
sage: F2(1) / F2(1) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_956 )
try:
 _st_.current_tex_line = _sage_const_1238 
 _st_.commandline(_sage_const_32 , r"""
sage: Z3 = GF(3) # prime field
sage: Z3t.<t> = Z3[] # polynomials over Z3
sage: P = Z3t(t^2+1)
sage: P.is_irreducible()
sage: F3_2.<t> = GF(3^2, name='t', modulus=P) # Extension field F_3^2
sage: F3_2
sage: F3_2(t+2)*F3_2(2*t+2) == F3_2(2)
sage: F3_2(2*t+2)^(-1) # multiplicative inverse
sage: # verify our solution to (t+1)(x^2 + (2t+2)) = 2
sage: F3_2(t+1)*(F3_2(t)**2 + F3_2(2*t+2)) == F3_2(2)
sage: F3_2(t+1)*(F3_2(2*t)**2 + F3_2(2*t+2)) == F3_2(2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1250 )
_st_.endofdoc()

