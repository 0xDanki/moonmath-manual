## -*- encoding: utf-8 -*-

# This file was *autogenerated* from the file /home/mirco/Leastauthority/MMM/moonmath-manual/main-moonmath.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_612 = Integer(612); _sage_const_852 = Integer(852); _sage_const_907 = Integer(907); _sage_const_695 = Integer(695); _sage_const_1441 = Integer(1441); _sage_const_1336 = Integer(1336); _sage_const_85 = Integer(85); _sage_const_294 = Integer(294); _sage_const_296 = Integer(296); _sage_const_83 = Integer(83); _sage_const_768 = Integer(768); _sage_const_260 = Integer(260); _sage_const_9973 = Integer(9973); _sage_const_765 = Integer(765); _sage_const_621 = Integer(621); _sage_const_1141 = Integer(1141); _sage_const_1385 = Integer(1385); _sage_const_1380 = Integer(1380); _sage_const_1165 = Integer(1165); _sage_const_535 = Integer(535); _sage_const_537 = Integer(537); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_14 = Integer(14); _sage_const_19 = Integer(19); _sage_const_18 = Integer(18); _sage_const_99 = Integer(99); _sage_const_1177 = Integer(1177); _sage_const_648 = Integer(648); _sage_const_103 = Integer(103); _sage_const_105 = Integer(105); _sage_const_757 = Integer(757); _sage_const_583 = Integer(583); _sage_const_588 = Integer(588); _sage_const_737 = Integer(737); _sage_const_1152 = Integer(1152); _sage_const_323 = Integer(323); _sage_const_732 = Integer(732); _sage_const_326 = Integer(326); _sage_const_1545 = Integer(1545); _sage_const_882 = Integer(882); _sage_const_66 = Integer(66); _sage_const_130 = Integer(130); _sage_const_138 = Integer(138); _sage_const_238 = Integer(238); _sage_const_550 = Integer(550); _sage_const_721 = Integer(721); _sage_const_1414 = Integer(1414); _sage_const_252 = Integer(252); _sage_const_1555 = Integer(1555); _sage_const_1410 = Integer(1410); _sage_const_44 = Integer(44); _sage_const_1311 = Integer(1311); _sage_const_77 = Integer(77); _sage_const_121 = Integer(121); _sage_const_79 = Integer(79); _sage_const_715 = Integer(715); _sage_const_1077 = Integer(1077); _sage_const_80 = Integer(80); _sage_const_267 = Integer(267); _sage_const_1452 = Integer(1452); _sage_const_1473 = Integer(1473); _sage_const_1119 = Integer(1119); _sage_const_30 = Integer(30); _sage_const_793 = Integer(793); _sage_const_1322 = Integer(1322); _sage_const_1156 = Integer(1156); _sage_const_40 = Integer(40); _sage_const_41 = Integer(41); _sage_const_42 = Integer(42); _sage_const_43 = Integer(43); _sage_const_1089 = Integer(1089); _sage_const_390 = Integer(390); _sage_const_392 = Integer(392); _sage_const_48 = Integer(48); _sage_const_157 = Integer(157); _sage_const_154 = Integer(154); _sage_const_1326 = Integer(1326); _sage_const_1115 = Integer(1115); _sage_const_276 = Integer(276); _sage_const_465 = Integer(465); _sage_const_272 = Integer(272); _sage_const_372 = Integer(372); _sage_const_469 = Integer(469); _sage_const_787 = Integer(787); _sage_const_58 = Integer(58); _sage_const_51 = Integer(51); _sage_const_143 = Integer(143); _sage_const_652 = Integer(652); _sage_const_301 = Integer(301); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_1218 = Integer(1218); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_363 = Integer(363); _sage_const_28 = Integer(28); _sage_const_29 = Integer(29); _sage_const_877 = Integer(877); _sage_const_22 = Integer(22); _sage_const_23 = Integer(23); _sage_const_20 = Integer(20); _sage_const_21 = Integer(21); _sage_const_26 = Integer(26); _sage_const_27 = Integer(27); _sage_const_24 = Integer(24); _sage_const_25 = Integer(25); _sage_const_1182 = Integer(1182); _sage_const_665 = Integer(665); _sage_const_1469 = Integer(1469); _sage_const_213 = Integer(213); _sage_const_215 = Integer(215); _sage_const_845 = Integer(845); _sage_const_39 = Integer(39); _sage_const_38 = Integer(38); _sage_const_31 = Integer(31); _sage_const_686 = Integer(686); _sage_const_33 = Integer(33); _sage_const_32 = Integer(32); _sage_const_35 = Integer(35); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_36 = Integer(36); _sage_const_1211 = Integer(1211); _sage_const_1357 = Integer(1357); _sage_const_287 = Integer(287); _sage_const_902 = Integer(902); _sage_const_1352 = Integer(1352); _sage_const_670 = Integer(670); _sage_const_562 = Integer(562); _sage_const_774 = Integer(774)## This file (main-moonmath.sagetex.sage) was *autogenerated* from main-moonmath.tex with sagetex.sty version 2019/01/09 v3.2.
import sagetex
_st_ = sagetex.SageTeXProcessor('main-moonmath', version='2019/01/09 v3.2', version_check=True)
try:
 _st_.current_tex_line = _sage_const_48 
 _st_.commandline(_sage_const_0 , r"""
sage: ZZ # A sage notation for the integer type
sage: NN # A sage notation for the counting number type
sage: ZZ(5) # Get an element from the Ring of integers
sage: ZZ(5) + ZZ(3)
sage: ZZ(5) * NN(3)
sage: ZZ.random_element(10**50)
sage: ZZ(27713).str(2) # Binary string representation
sage: NN(27713).str(2) # Binary string representation
sage: ZZ(27713).str(16) # Hexadecimal string representation
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_58 )
try:
 _st_.current_tex_line = _sage_const_77 
 _st_.commandline(_sage_const_1 , r"""
sage: n = NN(19214758032624000)
sage: factor(n)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_80 )
try:
 _st_.current_tex_line = _sage_const_138 
 _st_.commandline(_sage_const_2 , r"""
sage: ZZ(-17) // ZZ(4) # Integer quotient
sage: ZZ(-17) % ZZ(4) # remainder
sage: ZZ(4).divides(ZZ(-17)) # self divides other
sage: ZZ(4).divides(ZZ(12))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_143 )
try:
 _st_.current_tex_line = _sage_const_154 
 _st_.commandline(_sage_const_3 , r"""
sage: ZZ(143785).quo_rem(ZZ(17)) # Euclidean Division
sage: ZZ(143785) == ZZ(8457)*ZZ(17) + ZZ(16) # check
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_157 )
try:
 _st_.current_tex_line = _sage_const_213 
 _st_.commandline(_sage_const_4 , r"""
sage: ZZ(12).xgcd(ZZ(5)) # (gcd(a,b),s,t)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_215 )
try:
 _st_.current_tex_line = _sage_const_287 
 _st_.commandline(_sage_const_5 , r"""
sage: ZZ(137).gcd(ZZ(64))
sage: ZZ(64)** ZZ(137) % ZZ(137) == ZZ(64) % ZZ(137)
sage: ZZ(64)** ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
sage: ZZ(1918).gcd(ZZ(137))
sage: ZZ(1918)** ZZ(137) % ZZ(137) == ZZ(1918) % ZZ(137)
sage: ZZ(1918)** ZZ(137-1) % ZZ(137) == ZZ(1) % ZZ(137)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_294 )
try:
 _st_.current_tex_line = _sage_const_323 
 _st_.commandline(_sage_const_6 , r"""
sage: (ZZ(7)* (ZZ(2)*ZZ(4) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(4) - ZZ(102))  % ZZ(6)
sage: (ZZ(7)* (ZZ(2)*ZZ(76) + ZZ(21)) + ZZ(11))  % ZZ(6) == (ZZ(76) - ZZ(102))  % ZZ(6)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_326 )
try:
 _st_.current_tex_line = _sage_const_390 
 _st_.commandline(_sage_const_7 , r"""
sage: CRT_list([4,1,3,0], [7,3,5,11])
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_392 )
try:
 _st_.current_tex_line = _sage_const_465 
 _st_.commandline(_sage_const_8 , r"""
sage: Z6 = Integers(6)
sage: Z6(2) + Z6(5)
sage: Z6(7)*(Z6(2)*Z6(4)+Z6(21))+Z6(11) == Z6(4) - Z6(102)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_469 )
try:
 _st_.current_tex_line = _sage_const_535 
 _st_.commandline(_sage_const_9 , r"""
sage: ZZ(6).xgcd(ZZ(5))
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_537 )
try:
 _st_.current_tex_line = _sage_const_583 
 _st_.commandline(_sage_const_10 , r"""
sage: Z5 = Integers(5)
sage: Z5(3)**(5-2)
sage: Z5(3)**(-1)
sage: Z5(3)**(5-2) == Z5(3)**(-1)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_588 )
try:
 _st_.current_tex_line = _sage_const_652 
 _st_.commandline(_sage_const_11 , r"""
sage: Zx = ZZ['x'] # integer polynomials with indeterminate x
sage: Zt.<t> = ZZ[] # integer polynomials with indeterminate t
sage: Zx
sage: Zt
sage: p1 = Zx([17,-4,2])
sage: p1
sage: p1.degree()
sage: p1.leading_coefficient()
sage: p2 = Zt(t^23)
sage: p2
sage: p6 = Zx([0])
sage: p6.degree()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_665 )
try:
 _st_.current_tex_line = _sage_const_686 
 _st_.commandline(_sage_const_12 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: Z6x
sage: p1 = Z6x([5,-4,2])
sage: p1
sage: p1 = Z6x([17,-4,2])
sage: p1
sage: Z6x(x-2)*Z6x(x+3)*Z6x(x-5) == Z6x(x^3 + 2*x^2 + x)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_695 )
try:
 _st_.current_tex_line = _sage_const_715 
 _st_.commandline(_sage_const_13 , r"""
sage: Zx = ZZ['x']
sage: p1 = Zx([17,-4,2])
sage: p7 = Zx(x-2)*Zx(x+3)*Zx(x-5)
sage: p1(ZZ(2))
sage: p7(ZZ(-6)) == ZZ(-264)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_721 )
try:
 _st_.current_tex_line = _sage_const_732 
 _st_.commandline(_sage_const_14 , r"""
sage: Z6 = Integers(6)
sage: Z6x = Z6['x']
sage: p1 = Z6x([5,-4,2])
sage: p1(Z6(2)) == Z6(5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_737 )
try:
 _st_.current_tex_line = _sage_const_768 
 _st_.commandline(_sage_const_15 , r"""
sage: Zx = ZZ['x']
sage: P = Zx([2,-4,5])
sage: Q = Zx([5,0,-2,1])
sage: P+Q == Zx(x^3 +3*x^2 -4*x +7)
sage: P*Q == Zx(5*x^5 -14*x^4 +10*x^3+21*x^2-20*x +10)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_774 )
try:
 _st_.current_tex_line = _sage_const_787 
 _st_.commandline(_sage_const_16 , r"""
sage: Z6x = Integers(6)['x']
sage: P = Z6x([2,-4,5])
sage: Q = Z6x([5,0,-2,1])
sage: P+Q == Z6x(x^3 +3*x^2 +2*x +1)
sage: P*Q == Z6x(5*x^5 +4*x^4 +4*x^3+3*x^2+4*x +4)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_793 )
try:
 _st_.current_tex_line = _sage_const_845 
 _st_.commandline(_sage_const_17 , r"""
sage: Zx = ZZ['x']
sage: A = Zx([-9,0,0,2,0,1])
sage: B = Zx([-1,4,1])
sage: M = Zx([-80,19,-4,1])
sage: R = Zx([-89,339])
sage: A == M*B + R
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_852 )
try:
 _st_.current_tex_line = _sage_const_877 
 _st_.commandline(_sage_const_18 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^2-3)
sage: p.roots()
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_882 )
try:
 _st_.current_tex_line = _sage_const_902 
 _st_.commandline(_sage_const_19 , r"""
sage: Zx = ZZ['x']
sage: p = Zx(x^7 + 3*x^6 + 3*x^5 + x^4 - x^3 - 3*x^2 - 3*x - 1)
sage: p.roots()
sage: p.factor()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_907 )
try:
 _st_.current_tex_line = _sage_const_272 
 _st_.commandline(_sage_const_20 , r"""
sage: QQ
sage: QQ(1/5) # Get an element from the field of rational numbers
sage: QQ(1/5) / QQ(3) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_276 )
try:
 _st_.current_tex_line = _sage_const_296 
 _st_.commandline(_sage_const_21 , r"""
sage: F2 = GF(2)
sage: F2(1) # Get an element from GF(2)
sage: F2(1) + F2(1) # Addition
sage: F2(1) / F2(1) # Division
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_301 )
try:
 _st_.current_tex_line = _sage_const_550 
 _st_.commandline(_sage_const_22 , r"""
sage: Z3 = GF(3) # prime field
sage: Z3t.<t> = Z3[] # polynomials over Z3
sage: P = Z3t(t^2+1)
sage: P.is_irreducible()
sage: F3_2.<t> = GF(3^2, name='t', modulus=P)
sage: F3_2
sage: F3_2(t+2)*F3_2(2*t+2) == F3_2(2)
sage: F3_2(2*t+2)^(-1) # multiplicative inverse
sage: # verify our solution to (t+1)(x^2 + (2t+2)) = 2
sage: F3_2(t+1)*(F3_2(t)**2 + F3_2(2*t+2)) == F3_2(2)
sage: F3_2(t+1)*(F3_2(2*t)**2 + F3_2(2*t+2)) == F3_2(2)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_562 )
_st_.current_tex_line = _sage_const_34 
_st_.blockbegin()
try:
 E1 = EllipticCurve([-_sage_const_2 ,_sage_const_1 ])
 C1 = E1.plot()
 F = GF(_sage_const_9973 )
 E2 = EllipticCurve(F, [-_sage_const_2 ,_sage_const_1 ])
 C2 = E2.plot()
except:
 _st_.goboom(_sage_const_40 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_42 
 _st_.plot(_sage_const_0 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_42 )
try:
 _st_.current_tex_line = _sage_const_43 
 _st_.plot(_sage_const_1 , format='notprovided', _p_=C2)
except:
 _st_.goboom(_sage_const_43 )
try:
 _st_.current_tex_line = _sage_const_51 
 _st_.commandline(_sage_const_23 , r"""
sage: F5 = GF(5) # define the base field
sage: a = F5(2) # parameter a
sage: b = F5(4) # parameter b
sage: F5(6)*(F5(4)*F5(2)^3+F5(27)*F5(4)^2) != F5(0)
sage: # short Weierstrass curve
sage: E = EllipticCurve(F5,[a,b]) # y^2 == x^3 + ax +b
sage: P = E(0,2) # 2^2 == 0^3 + 2*0 + 4
sage: P.xy() # affine coordinates
sage: INF = E(0) # point at infinity
sage: try:  # point at infinity has no affine coordinates
....:     INF.xy()
....: except ZeroDivisionError:
....:     pass
sage: P = E.plot() # create a plotted version
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_66 )
_st_.current_tex_line = _sage_const_79 
_st_.blockbegin()
try:
 F5 = GF(_sage_const_5 )
 E1 = EllipticCurve(F5, [_sage_const_1 ,_sage_const_1 ])
 C1 = E1.plot()
except:
 _st_.goboom(_sage_const_83 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_85 
 _st_.plot(_sage_const_2 , format='notprovided', _p_=C1)
except:
 _st_.goboom(_sage_const_85 )
_st_.current_tex_line = _sage_const_99 
_st_.blockbegin()
try:
 F13 = GF(_sage_const_13 )
 PJJ_13 = EllipticCurve(F13, [_sage_const_8 ,_sage_const_8 ])
 CPJJ_13 = PJJ_13.plot()
except:
 _st_.goboom(_sage_const_103 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_105 
 _st_.plot(_sage_const_3 , format='notprovided', _p_=CPJJ_13)
except:
 _st_.goboom(_sage_const_105 )
try:
 _st_.current_tex_line = _sage_const_121 
 _st_.commandline(_sage_const_24 , r"""
sage: p = 115792089237316195423570985008687907853269984665640564039457584007908834671663
sage: p.is_prime()
sage: p.nbits()
sage: Fp = GF(p)
sage: Secp256k1 = EllipticCurve(Fp,[0,7])
sage: r = Secp256k1.order() # number of elements
sage: r.is_prime()
sage: r.nbits()
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_130 )
try:
 _st_.current_tex_line = _sage_const_238 
 _st_.commandline(_sage_const_25 , r"""
sage: F5 = GF(5)
sage: E1 = EllipticCurve(F5,[1,1])
sage: INF = E1(0) # point at infinity
sage: P1 = E1(0,1)
sage: P2 = E1(4,2)
sage: P3 = E1(0,4)
sage: R1 = E1(2,1)
sage: R2 = E1(3,4)
sage: R1 == P1+P2
sage: INF == P1+P3
sage: R2 == P2+P2
sage: R2 == 2*P2
sage: P3 == P3 + INF
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_252 )
try:
 _st_.current_tex_line = _sage_const_260 
 _st_.commandline(_sage_const_26 , r"""
sage: F13 = GF(13)
sage: MJJ = EllipticCurve(F13,[8,8])
sage: P = MJJ(4,0)
sage: INF = MJJ(0) # Point at infinity
sage: INF == P+P
sage: INF == 2*P
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_267 )
try:
 _st_.current_tex_line = _sage_const_363 
 _st_.commandline(_sage_const_27 , r"""
sage: F13 = GF(13)
sage: PJJ = EllipticCurve(F13,[8,8])
sage: P = PJJ(5,11)
sage: INF = PJJ(0)
sage: 10*P == INF
sage: Q = PJJ(9,4)
sage: R = PJJ(4,0)
sage: 10*Q == R
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_372 )
try:
 _st_.current_tex_line = _sage_const_612 
 _st_.commandline(_sage_const_28 , r"""
sage: F13 = GF(13)
sage: L_MPJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(7)*y^2 == x^3 + F13(6)*x^2 +x:
....:             L_MPJJ.append((x,y))
sage: MPJJ = Set(L_MPJJ)
sage: # does not compute the point at infinity
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_621 )
try:
 _st_.current_tex_line = _sage_const_648 
 _st_.commandline(_sage_const_29 , r"""
sage: # Compute PHI of Montgomery form:
sage: L_PHI_MPJJ = []
sage: for (x,y) in L_MPJJ: # LMJJ as defined previously
....:     v = (F13(3)*x + F13(6))/(F13(3)*F13(7))
....:     w = y/F13(7)
....:     L_PHI_MPJJ.append((v,w))
sage: PHI_MPJJ = Set(L_PHI_MPJJ)
sage: # Computation Weierstrass form
sage: C_WPJJ = EllipticCurve(F13,[8,8])
sage: L_WPJJ = [P.xy() for P in C_WPJJ.points() if P.order() > 1]
sage: WPJJ = Set(L_WPJJ)
sage: # check PHI(Montgomery) == Weierstrass
sage: WPJJ == PHI_MPJJ
sage: # check the inverse map PHI^(-1)
sage: L_PHIINV_WPJJ = []
sage: for (v,w) in L_WPJJ:
....:     x = F13(7)*(v-F13(4))
....:     y = F13(7)*w
....:     L_PHIINV_WPJJ.append((x,y))
sage: PHIINV_WPJJ = Set(L_PHIINV_WPJJ)
sage: MPJJ == PHIINV_WPJJ
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_670 )
try:
 _st_.current_tex_line = _sage_const_757 
 _st_.commandline(_sage_const_30 , r"""
sage: F13 = GF(13)
sage: L_EPJJ = []
....: for x in F13:
....:     for y in F13:
....:         if F13(3)*x^2 + y^2 == 1+ F13(8)*x^2*y^2:
....:             L_EPJJ.append((x,y))
sage: EPJJ = Set(L_EPJJ)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_765 )
try:
 _st_.current_tex_line = _sage_const_1077 
 _st_.commandline(_sage_const_31 , r"""
sage: F43 = GF(43)
sage: F43t.<t> = F43[]
sage: F43_6.<v> = GF(43^6, name='v', modulus=t^6+6) # t^6+6 irreducible
sage: BLS6 = EllipticCurve (F43_6,[0 ,6])
sage: INF = BLS6(0) # point at infinity
sage: for P in INF.division_points(13): # PI(P) == [q]P
....:     if P.order() == 13: # exclude point at infinity
....:         PiP = BLS6([a.frobenius() for a in P])
....:         qP = 43*P
....:         if PiP == qP:
....:             print(P.xy())
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1089 )
try:
 _st_.current_tex_line = _sage_const_1115 
 _st_.commandline(_sage_const_32 , r"""
sage: g1 = BLS6([13,15])
sage: g2 = BLS6([7*v^2, 16*v^3])
sage: g1.weil_pairing(g2,13)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1119 )
try:
 _st_.current_tex_line = _sage_const_1141 
 _st_.commandline(_sage_const_33 , r"""
sage: F13 = GF(13)
sage: for A in xrange(3, 13):
....:     if (A-2) % 4 != 0:
....:         continue
....:     try:
....:         E = EllipticCurve(F13, [0, A, 0, 1, 0]) # Montgomery form
....:         E
....:         E.order()
....:     except:
....:         continue
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1152 )
try:
 _st_.current_tex_line = _sage_const_1156 
 _st_.commandline(_sage_const_34 , r"""
sage: for d in F13:
....:     j= ZZ(0)
....:     for x in F13:
....:         for y in F13:
....:             if x^2+y^2 == 1+d*x^2*y^2:
....:                 j=j+1
....:     print('d=',d)
....:     print('order=',j)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1165 )
try:
 _st_.current_tex_line = _sage_const_1177 
 _st_.commandline(_sage_const_35 , r"""
sage: for x in F13:
....:     for y in F13:
....:         if x^2+y^2 == F13(1)+F13(7)*x^2*y^2:
....:             print(x,y)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1182 )
try:
 _st_.current_tex_line = _sage_const_1211 
 _st_.commandline(_sage_const_36 , r"""
sage: def Edwards_add((x1,y1),(x2,y2),d):
....:     x3 = F13((F13(x1)*F13(y2)+F13(y1)*F13(x2))/((F13(1)+F13(d)*F13(x1)*F13
....: (x2)*F13(y1)*F13(y2))))
....:     y3 = F13((F13(y1)*F13(y2)-F13(x1)*F13(x2))/((F13(1)-F13(d)*F13(x1)*F13
....: (x2)*F13(y1)*F13(y2))))
....:     return (x3,y3)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1218 )
try:
 _st_.current_tex_line = _sage_const_1311 
 _st_.commandline(_sage_const_37 , r"""
sage: F13 = GF(13)
sage: for A in xrange(3, 13):
....:     if (A-2) % 4 != 0:
....:         continue
....:     try:
....:         E = EllipticCurve(F13, [0, A, 0, 1, 0]) # Montgomery form
....:         E
....:         E.order()
....:     except:
....:         continue
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1322 )
try:
 _st_.current_tex_line = _sage_const_1326 
 _st_.commandline(_sage_const_38 , r"""
sage: j = ZZ(0)
sage: for a in F13:
....:     for d in F13:
....:         j = 0
....:         for x in F13:
....:             for y in F13:
....:                 if a*x^2 + y^2 == 1+d*x^2*y^2:
....:                     j=j+1
....:         print('curve: a=',a,'d=',d,'order:',j)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1336 )
try:
 _st_.current_tex_line = _sage_const_1352 
 _st_.commandline(_sage_const_39 , r"""
sage: for x in F13:
....:     for y in F13:
....:         if F13(2)*x^2+y^2 == F13(1)+F13(11)*x^2*y^2:
....:             print(x,y)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1357 )
try:
 _st_.current_tex_line = _sage_const_1380 
 _st_.commandline(_sage_const_40 , r"""
sage: def Edwards_add((x1,y1),(x2,y2),a,d):
....:     x3 = F13((F13(x1)*F13(y2)+F13(y1)*F13(x2))/((F13(1)+F13(d)*F13(x1)*F13(x2)*F13(y1)*F13(y2))))
....:     y3 = F13((F13(y1)*F13(y2)-F13(a)*F13(x1)*F13(x2))/((F13(1)-F13(d)*F13(x1)*F13(x2)*F13(y1)*F13(y2))))
....:     return (x3,y3)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1385 )
try:
 _st_.current_tex_line = _sage_const_1410 
 _st_.commandline(_sage_const_41 , r"""
sage: F7 = GF(7)
sage: MNT4 = EllipticCurve (F7,[4 ,1])
sage: [P.xy() for P in MNT4.points() if P.order() > 1]
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1414 )
try:
 _st_.current_tex_line = _sage_const_1441 
 _st_.commandline(_sage_const_42 , r"""
sage: F7t.<t> = F7[]
sage: F7_4.<u> = GF(7^4, name='u', modulus=t^4+t+1) # embedding degree is 4
sage: MNT4 = EllipticCurve (F7_4,[4 ,1])
sage: INF = MNT4(0) # point at infinity
sage: for P in INF.division_points(5): # PI(P) == [q]P
....:     if P.order() == 5: # exclude point at infinity
....:         PiP = MNT4([a.frobenius() for a in P])
....:         qP = 7*P
....:         if PiP == qP:
....:             print(P.xy())
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1452 )
try:
 _st_.current_tex_line = _sage_const_1469 
 _st_.commandline(_sage_const_43 , r"""
sage: g1 = MNT4([0,1])
sage: g2 = MNT4(2*u^3 + 5*u^2 + 4*u + 2, 2*u^3 + 3*u + 5)
sage: g1.weil_pairing(g2,5)
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1473 )
try:
 _st_.current_tex_line = _sage_const_1545 
 _st_.commandline(_sage_const_44 , r"""
sage: G.<x> = GF(5^6) # embedding degree is 6
sage: MNT6 = EllipticCurve (G,[2 ,1])
sage: INF = MNT6(0) # point at infinity
sage: for P in INF.division_points(7): # PI(P) == [q]P
....:     if P.order() == 7: # exclude point at infinity
....:         PiP = MNT6([a.frobenius() for a in P])
....:         qP = 5*P
....:         if PiP == qP:
....:             print(P.xy())
""", globals(), locals(), True)
except:
 _st_.goboom(_sage_const_1555 )
_st_.endofdoc()

